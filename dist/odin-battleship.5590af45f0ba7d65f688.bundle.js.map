{"version":3,"file":"odin-battleship.5590af45f0ba7d65f688.bundle.js","mappings":"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","sources":["webpack://top-javascript-study/./odin-battleship/helpers/create-element.js","webpack://top-javascript-study/./odin-battleship/game-events/game-events.js","webpack://top-javascript-study/./odin-battleship/ship/ship.js","webpack://top-javascript-study/./odin-battleship/game-board/game-board.js","webpack://top-javascript-study/./odin-battleship/player/player.js","webpack://top-javascript-study/./odin-battleship/helpers/create-game.js","webpack://top-javascript-study/./odin-battleship/components/player-info/index.js","webpack://top-javascript-study/./odin-battleship/helpers/capitalize.js","webpack://top-javascript-study/./odin-battleship/components/board/index.js","webpack://top-javascript-study/./odin-battleship/index.js"],"sourcesContent":["/**\n * Creates HTMLElement of the given 'tagName' with any of the given\n * className, id or attributes\n * @param {string} tagName\n * @param {string?} className\n * @param {string?} textContent\n * @param {Array<string, string>?} attrs\n * - Any number of attributes (each of which as a key-value pair)\n * @returns {HTMLElement}\n */\nexport default function createElement(\n  tagName,\n  className,\n  textContent,\n  ...attrs\n) {\n  if (typeof tagName !== 'string') {\n    throw TypeError(\"Missing 'tagName' of type 'string'!\");\n  }\n  const element = document.createElement(tagName);\n  if (className) element.className = className;\n  if (textContent) element.textContent = textContent;\n  // Flatten attrs 1 level depth (in case attrs is in the form of an Array of paris)\n  if (\n    attrs.length === 1 &&\n    Array.isArray(attrs[0]) &&\n    Array.isArray(attrs[0][0])\n  ) {\n    attrs = attrs.flat(1);\n  }\n  if (attrs.length > 0) {\n    for (let i = 0; i < attrs.length; i++) {\n      if (\n        Array.isArray(attrs[i]) &&\n        attrs[i].length === 2 &&\n        attrs[i][0] &&\n        typeof attrs[i][0] === 'string'\n      ) {\n        if (attrs[i][1] || attrs[i][1] === 0 || attrs[i][1] === '') {\n          element.setAttribute(attrs[i][0], attrs[i][1]);\n        }\n      } else {\n        throw TypeError(\n          \"A given attribute in '...attrs' must be in the form of [string, string]\",\n        );\n      }\n    }\n  }\n  return element;\n}\n\nexport { createElement };\n","const REGISTRY = {};\n\n/**\n * Adds the given callback/s to registered callbacks on the given event (eventName).\n * @param {string} eventName\n * @param  {...function} callbacks\n */\nfunction add(eventName, ...callbacks) {\n  if (\n    typeof eventName !== 'string' ||\n    !callbacks.every((c) => typeof c === 'function')\n  ) {\n    const strArgs = `${eventName}${callbacks.length > 0 ? ', ' + callbacks.toString().replace(/(?:\\[|\\])/, '') : ''}`;\n    throw TypeError(\n      `Expect event name of type 'string' and at least 1 callback! Given: '${strArgs}'`,\n    );\n  }\n\n  if (REGISTRY[eventName]) {\n    REGISTRY[eventName].push(...callbacks);\n  } else {\n    REGISTRY[eventName] = callbacks;\n  }\n}\nObject.freeze(add);\nObject.freeze(add.prototype);\n\n/**\n * Removes the given callback from the registered callbacks on the given event (eventName).\n *\n * NOTE: The given callback MUST be the same reference that you had gavin to 'add' in order to be removed.\n * @param {string} eventName\n * @param {function} callback\n */\nfunction remove(eventName, callback) {\n  if (typeof eventName !== 'string' || typeof callback !== 'function') {\n    throw TypeError(\n      `Expect (eventName: string) & (callback: function)! Given: '${eventName}, ${callback}'`,\n    );\n  }\n\n  if (REGISTRY[eventName]) {\n    REGISTRY[eventName] = REGISTRY[eventName].filter(\n      (registeredCallback) => registeredCallback !== callback,\n    );\n  }\n}\nObject.freeze(remove);\nObject.freeze(remove.prototype);\n\n/**\n * Emits the given event (eventName); All registered callbacks on that event gets called.\n * @param {string} eventName\n * @param  {...any} args\n */\nfunction emit(eventName, ...args) {\n  if (typeof eventName !== 'string') {\n    throw TypeError(\n      `Expect at least 1 argument of type 'string'! Given: '${eventName}'`,\n    );\n  }\n\n  if (REGISTRY[eventName]) {\n    REGISTRY[eventName].forEach((callback) => {\n      callback(...args);\n    });\n  }\n}\nObject.freeze(emit);\nObject.freeze(emit.prototype);\n\nconst gameEvents = {\n  ATTACK: 'Fire',\n  HIT: 'Boom',\n  MISS: 'Oops',\n  LOSS: 'Meh',\n  GAME_OVER: 'Bye',\n  add,\n  remove,\n  emit,\n};\nObject.freeze(gameEvents);\n\nexport default gameEvents;\nexport { gameEvents };\n","export default function Ship(length) {\n  if (!Number.isInteger(length) || length < 2 || length > 5) {\n    throw TypeError(\n      `Expect 1 argument (length) of type 'number'; 1 < length < 6! given '${length}'`,\n    );\n  }\n\n  // Ship's state & logic\n  let hits = 0,\n    sunk = false;\n  const hit = () => {\n    if (!sunk) {\n      hits++;\n      sunk = hits >= length;\n    }\n  };\n  const isSunk = () => sunk;\n\n  // Create Ship object with its members to be recorded (just for autocompletion) before making them non-writable\n  const ship = {\n    length,\n    hits,\n    hit,\n    isSunk,\n  };\n\n  // Set the prototype of ship object to Ship.prototype\n  Object.setPrototypeOf(ship, Ship.prototype);\n\n  // Reconfigure all Ship's members and make them non-writable\n  const config = { configurable: false, enumerable: true };\n  const configExt = { ...config, writable: false };\n  Object.defineProperties(ship, {\n    // Set the constructor of a ship object to Ship\n    constructor: {\n      ...configExt,\n      enumerable: false,\n      value: Ship,\n    },\n    length: {\n      ...config,\n      get() {\n        return length;\n      },\n    },\n    hits: {\n      ...config,\n      get() {\n        return hits;\n      },\n    },\n    hit: {\n      ...configExt,\n      value: hit,\n    },\n    isSunk: {\n      ...configExt,\n      value: isSunk,\n    },\n  });\n\n  return ship;\n}\n\nexport { Ship };\n","import { gameEvents } from '../game-events';\nimport { Ship } from '../ship';\n\nexport default function GameBoard() {\n  const BOARD_SIDE_LENGTH = 10;\n\n  // Create the board & Fill it with cell objects\n  const board = [];\n  for (let i = 0; i < BOARD_SIDE_LENGTH; i++) {\n    board[i] = [];\n    for (let j = 0; j < BOARD_SIDE_LENGTH; j++) {\n      board[i][j] = {\n        ship: null,\n        attacked: false,\n        missed: false,\n      };\n    }\n  }\n\n  // Define a private helper that takes 'n' to generate random number 'r': 0 < r < n\n  const getRandomUpToButNotIncluding = (n) => Math.floor(Math.random() * n);\n\n  // Define a private helper to check whether a cell on board is empty\n  const isEmptyCell = ([i, j]) => board[i][j].ship === null;\n\n  // Define a private helper to create a list of empty cells that constitutes a valid ship area\n  const getValidShipArea = (ship, firstCellPlace, direction) => {\n    const result = [];\n    const currentCellPlace = firstCellPlace;\n    for (let i = 0; i < ship.length; i++) {\n      if (!isEmptyCell(currentCellPlace)) {\n        return [];\n      }\n      // Push a copy of it on the 'result' array (ship area)\n      result.push([...currentCellPlace]);\n      // Move forward the current cell's place in the given direction\n      currentCellPlace[direction]++;\n      /* NOTE: I am PUSHING a COPY of the 'currentCellPlace', because I am MUTATING its values when I MOVE it */\n    }\n    return result;\n  };\n\n  // Create a flag indicates to a randomization fail (IN CASE OF LONG/INFINITE LOOP)\n  let randomizationFailed = false;\n\n  // Define a private helper to insert a given ship into a random place in the board\n  const insertShipInRandomBoardPlace = (ship) => {\n    let shipArea = []; // Placeholder for cells' places of the ship\n    let loopsCount = 0;\n    while (shipArea.length === 0 && loopsCount < 100) {\n      loopsCount++;\n      // Choose a random direction\n      const movingAxis = getRandomUpToButNotIncluding(2);\n      const fixedAxis = movingAxis === 0 ? 1 : 0;\n      // Choose random cell place for the first cell\n      const randomCellPlace = Array(2);\n      // Get random number 'r' for moving axis, r: 0 > r > (board-side's length - ship's length)\n      randomCellPlace[movingAxis] = getRandomUpToButNotIncluding(\n        BOARD_SIDE_LENGTH - ship.length,\n      );\n      // Get random number 'r' for fixed axis, r: 0 > r > (board-side's length)\n      randomCellPlace[fixedAxis] =\n        getRandomUpToButNotIncluding(BOARD_SIDE_LENGTH);\n      shipArea = getValidShipArea(ship, randomCellPlace, movingAxis);\n    }\n    randomizationFailed = loopsCount >= 100;\n    shipArea.forEach(([i, j]) => {\n      board[i][j].ship = ship;\n    });\n  };\n\n  // Insert the ships in random places\n  const ships = [Ship(2), Ship(3), Ship(3), Ship(4), Ship(5)];\n  do {\n    ships.forEach(insertShipInRandomBoardPlace);\n  } while (randomizationFailed);\n\n  // Define receiveAttack function\n  const receiveAttack = ([i, j]) => {\n    const lastI = BOARD_SIDE_LENGTH - 1;\n    const lastJ = BOARD_SIDE_LENGTH - 1;\n    if (i < 0 || j < 0 || i > lastI || j > lastJ) {\n      throw TypeError(\n        `Invalid coordinates! It should be in the range from '[0, 0]' to '[${lastI}, ${lastJ}]', the given is '[${j}, ${j}]'.`,\n      );\n    }\n    const cell = board[i][j];\n    if (cell.ship && !cell.attacked) {\n      cell.ship.hit();\n      cell.attacked = true;\n      gameEvents.emit(gameEvents.HIT, [i, j]);\n    } else if (!cell.ship && !cell.missed) {\n      cell.missed = true;\n      gameEvents.emit(gameEvents.MISS, [i, j]);\n    }\n    if (ships.every((ship) => ship.isSunk())) {\n      gameEvents.emit(gameEvents.LOSS);\n    }\n  };\n\n  // Create gameBoard object\n  const gameBoard = {\n    ships,\n    board,\n    receiveAttack,\n  };\n\n  // Make a gameBoard object an instance of GameBoard\n  Object.setPrototypeOf(gameBoard, GameBoard.prototype);\n  Object.defineProperty(gameBoard, 'constructor', {\n    value: GameBoard,\n    writable: false,\n    configurable: false,\n    enumerable: false,\n  });\n\n  // Make a gameBoard object immutable\n  Object.freeze(gameBoard);\n\n  return gameBoard;\n}\n\nexport { GameBoard };\n","import { gameEvents } from '../game-events';\nimport { GameBoard } from '../game-board';\n\n/**\n * A factory creates player object. A call without argument creates player of type 'computer'.\n * @param {string?} type - The type of the returned player ['computer' | 'human']\n * @returns {Player}\n */\nexport default function Player(playerType) {\n  // Assert that the given type is valid type or it is 'undefined', Otherwise, throw error\n  if (\n    playerType !== undefined &&\n    playerType !== Player.TYPES.COMPUTER &&\n    playerType !== Player.TYPES.HUMAN\n  ) {\n    throw TypeError(\n      `Invalid type! Only '${Player.TYPES.COMPUTER}' & '${Player.TYPES.HUMAN}' are the valid types. Given: '${playerType}'`,\n    );\n  }\n\n  const player = {\n    type: playerType === undefined ? Player.TYPES.COMPUTER : playerType,\n    gameBoard: GameBoard(),\n  };\n\n  // Add play method to player type 'computer'\n  if (player.type === Player.TYPES.COMPUTER) {\n    const maxHeight = player.gameBoard.board.length;\n    const maxWidth = player.gameBoard.board[0]?.length ?? 0;\n    // Save the targeted cell\n    let target = null;\n    // Save all valid targets\n    const validTargetsPairs = [];\n    for (let i = 0; i < maxHeight; i++) {\n      for (let j = 0; j < maxWidth; j++) {\n        validTargetsPairs.push([i, j]);\n      }\n    }\n    // Create a variable to hold our direction\n    // If it was a successful direction, then we keep moving in that direction\n    // Otherwise, reset the direction to null again\n    let previousDirection = null;\n    // Create a variable to hold a smart target instead of a random one\n    // The smart target is any adjacent cell and could be in a successful direction\n    let smartTarget = null;\n    // Create a helper checks whether a given cell is valid target\n    const isValidTarget = (cellPair) => {\n      return (\n        cellPair[0] >= 0 &&\n        cellPair[1] >= 0 &&\n        cellPair[0] < maxHeight &&\n        cellPair[1] < maxWidth &&\n        validTargetsPairs.some(\n          ([i, j]) => i === cellPair[0] && j === cellPair[1],\n        )\n      );\n    };\n    // Create a helper that gets all possible cells to attack (based on the last attacked cell)\n    const setSmartTarget = () => {\n      const DIRECTIONS = [\n        [-1, 0],\n        [0, 1],\n        [1, 0],\n        [0, -1],\n      ];\n      // Separate the direction index from the cell, because we need to keep track the direction itself to follow again\n      const validAdjacentCellsOrNulls = [];\n      // Save the indexes of the valid directions\n      const validAdjacentCellsIndexes = [];\n      DIRECTIONS.forEach((dirMod, i) => {\n        const adjacentCellPair = [target[0] + dirMod[0], target[1] + dirMod[1]];\n        if (isValidTarget(adjacentCellPair)) {\n          validAdjacentCellsOrNulls.push(adjacentCellPair);\n          validAdjacentCellsIndexes.push(i);\n        } else {\n          validAdjacentCellsOrNulls.push(null);\n        }\n      });\n      if (validAdjacentCellsIndexes.length > 0) {\n        // If the previous direction is null or lead to valid adjacent cell,\n        // then set it to lead to a valid adjacent cell\n        if (\n          previousDirection === null ||\n          !validAdjacentCellsIndexes.includes(previousDirection)\n        ) {\n          previousDirection =\n            validAdjacentCellsIndexes[\n              Math.floor(Math.random() * validAdjacentCellsIndexes.length)\n            ];\n        }\n        // Follow the previous direction\n        smartTarget = validAdjacentCellsOrNulls[previousDirection];\n      } else {\n        // There is not valid adjacent cells\n        previousDirection = null;\n        smartTarget = null;\n      }\n    };\n    // Create a flag to distinguish our attacks\n    let attacked = false;\n    // Reset previousDirection to null on every MISS event\n    gameEvents.add(gameEvents.MISS, () => {\n      if (attacked) {\n        previousDirection = null;\n        attacked = false;\n      }\n    });\n    // Handle HIT events\n    gameEvents.add(gameEvents.HIT, () => {\n      if (attacked) {\n        setSmartTarget();\n        attacked = false;\n      }\n    });\n    player.play = () => {\n      if (validTargetsPairs.length > 0) {\n        if (smartTarget === null) {\n          const randomTargetIndex = Math.floor(\n            Math.random() * validTargetsPairs.length,\n          );\n          target = validTargetsPairs[randomTargetIndex];\n          validTargetsPairs.splice(randomTargetIndex, 1);\n        } else {\n          target = smartTarget;\n          smartTarget = null;\n          validTargetsPairs.splice(\n            validTargetsPairs.findIndex(\n              ([i, j]) => target[0] === i && target[1] === j,\n            ),\n            1,\n          );\n        }\n        attacked = true;\n        gameEvents.emit(gameEvents.ATTACK, target);\n      } else {\n        attacked = false;\n        gameEvents.emit(gameEvents.GAME_OVER);\n      }\n    };\n  }\n\n  // Make the player object an instance of 'Player'\n  Object.setPrototypeOf(player, Player.prototype);\n  // Set 'Player' as the constructor for the player object\n  Object.defineProperty(player, 'constructor', {\n    value: Player,\n    writable: false,\n    enumerable: false,\n    configurable: false,\n  });\n  Object.freeze(player);\n\n  return player;\n}\n\n// Add TYPES as a static property on 'Player'\nPlayer.TYPES = { COMPUTER: 'C', HUMAN: 'H' };\n\n// Freeze Player & its prototype\nObject.freeze(Player);\nObject.freeze(Player.prototype);\n\nexport { Player };\n","import { createElement } from './create-element';\nimport { gameEvents } from '../game-events';\nimport { PlayerInfo } from '../components/player-info';\nimport { Board } from '../components/board';\nimport { Player } from '../player';\n\n/**\n * Creates a game object to hold the state of the game\n * @returns @type {Object}\n */\nfunction createNewState() {\n  return {\n    playersData: [\n      {\n        name: 'first-player',\n        player: Player(Player.TYPES.HUMAN),\n        playerUI: createElement('div', 'first-player'),\n      },\n      {\n        name: 'second-player',\n        player: Player(Player.TYPES.COMPUTER),\n        playerUI: createElement('div', 'second-player'),\n      },\n    ],\n    currentPlayerIndex: 0,\n    allPlayersDisabled: false,\n    /**\n     * Switches the current player's index\n     */\n    switchCurrentPlayer() {\n      this.currentPlayerIndex = (this.currentPlayerIndex + 1) % 2;\n    },\n    /**\n     * Renders the recent player's UI-information/board to the DOM\n     * @param {number} playerIndex\n     * @param {HTMLDivElement?} parentElement - Optional parent to append player's UI to it\n     */\n    renderPlayerUI(playerIndex, parentElement) {\n      const playerData = this.playersData[playerIndex];\n      const currentPlayer = playerIndex === this.currentPlayerIndex;\n      const disabled = this.allPlayersDisabled || currentPlayer;\n      const playerTypeComputer =\n        playerData.player.type === Player.TYPES.COMPUTER;\n      const clickable = playerTypeComputer && !currentPlayer && !disabled;\n      [...playerData.playerUI.children].forEach((child) => child.remove());\n      playerData.playerUI.append(\n        PlayerInfo(playerData.name, playerData.player.type),\n        Board(\n          playerData.player.gameBoard,\n          playerData.player.type === Player.TYPES.COMPUTER,\n          disabled,\n          clickable,\n        ),\n      );\n      if (parentElement) parentElement.append(playerData.playerUI);\n    },\n    /**\n     * Renders the recent ALL player's UIs-information/board to the DOM\n     * @param {HTMLDivElement} parentElement - Optional parent to append ALL player's UIs to it\n     */\n    renderAllPlayersUI(parentElement) {\n      for (let i = 0; i < this.playersData.length; i++) {\n        this.renderPlayerUI(i, parentElement);\n      }\n    },\n    /**\n     * Plays on a computer's turn\n     */\n    playIfComputerTurn() {\n      const currentPlayer = this.playersData[this.currentPlayerIndex].player;\n      if (currentPlayer.type === Player.TYPES.COMPUTER) {\n        setTimeout(() => {\n          currentPlayer.play();\n        }, 1000);\n      }\n    },\n    /**\n     * Checks whether the computer is the current player\n     */\n    isComputerCurrentPlayer() {\n      return (\n        this.playersData[this.currentPlayerIndex].player.type ===\n        Player.TYPES.COMPUTER\n      );\n    },\n  };\n}\n\nlet gameState = createNewState();\n\nlet evaluatingAttack = false;\n\n/** Handles ATTACK event */\nfunction attackHandler(cellPlacePair) {\n  if (!evaluatingAttack) {\n    evaluatingAttack = true;\n    const opponentIndex = gameState.currentPlayerIndex === 0 ? 1 : 0;\n    const opponentPlayer = gameState.playersData[opponentIndex].player;\n    opponentPlayer.gameBoard.receiveAttack(cellPlacePair);\n    evaluatingAttack = false;\n  }\n}\n\n/** Handles HIT event */\nfunction hitHandler() {\n  // Continue with the current player, but rerender the opponent's board\n  gameState.renderPlayerUI(gameState.currentPlayerIndex === 0 ? 1 : 0);\n  gameState.playIfComputerTurn();\n}\n\n/** Handles MISS event */\nfunction missHandler() {\n  gameState.switchCurrentPlayer();\n  gameState.renderAllPlayersUI();\n  gameState.playIfComputerTurn();\n}\n\n/** Handles LOSS event */\nfunction lossHandler() {\n  gameEvents.emit(gameEvents.GAME_OVER);\n}\n\n/** Adds all game events' handlers */\nfunction addGameEventsHandlers() {\n  gameEvents.add(gameEvents.ATTACK, attackHandler);\n  gameEvents.add(gameEvents.HIT, hitHandler);\n  gameEvents.add(gameEvents.MISS, missHandler);\n  gameEvents.add(gameEvents.LOSS, lossHandler);\n}\n\n/** Removes all game events' handlers */\nfunction removeGameEventsHandlers() {\n  gameEvents.remove(gameEvents.ATTACK, attackHandler);\n  gameEvents.remove(gameEvents.HIT, hitHandler);\n  gameEvents.remove(gameEvents.MISS, missHandler);\n  gameEvents.remove(gameEvents.LOSS, lossHandler);\n}\n\n/**\n * Creates a game object to hold the state of the game\n * @returns @type {BattleshipGame}\n */\nexport default function createGame(gameContainer) {\n  return {\n    gameContainer,\n    /**\n     * - Resets game's state/events.\n     * - Rerenders the game's UI after removing the old UI from the game's container.\n     */\n    startNewGame() {\n      removeGameEventsHandlers();\n      gameState = createNewState();\n      [...this.gameContainer.children].forEach((child) => child.remove());\n      gameState.renderAllPlayersUI(this.gameContainer);\n      addGameEventsHandlers();\n    },\n    /** Checks whether the current player is the computer (should be called on a player's loss) */\n    isComputerWon() {\n      return gameState.isComputerCurrentPlayer();\n    },\n    /** Renders disabled UI */\n    endCurrentGame() {\n      gameState.allPlayersDisabled = true;\n      gameState.renderAllPlayersUI();\n    },\n  };\n}\n\nexport { createGame };\n","import './index.css';\n\nimport { createElement } from '../../helpers/create-element';\nimport { capitalize } from '../../helpers/capitalize';\nimport { Player } from '../../player';\n\n/**\n * Creates DOM element (div) that has the player's information\n * @param {string} name - The name of the player (hyphened not spaced)\n * @returns {HTMLDivElement}\n */\nexport default function PlayerInfo(name, type) {\n  if (typeof name !== 'string') {\n    throw TypeError(\n      `Invalid 'name' type; expected: 'string', given: '${name}'`,\n    );\n  }\n\n  let typeIndicator;\n\n  if (type === Player.TYPES.COMPUTER) {\n    typeIndicator = 'COMPUTER';\n  } else if (type === Player.TYPES.HUMAN) {\n    typeIndicator = 'YOU';\n  } else {\n    throw TypeError(`Invalid player type!`);\n  }\n\n  const playerInfo = createElement('div', `${name}-info`);\n\n  const nameIndicator = capitalize(name.replace('-', ' '));\n\n  const playerName = createElement(\n    'h3',\n    'player-name',\n    `${nameIndicator} (${typeIndicator})`,\n  );\n\n  playerInfo.append(playerName);\n\n  return playerInfo;\n}\n\nexport { PlayerInfo };\n","/**\n * Returns same string with the first character capitalized.\n * @param {string} text - Text to capitalize\n * @return {string} - Same string with first character capitalized\n */\nexport default function capitalize(text) {\n  const strText = String(text);\n  const strAfterFirst = strText.length > 1 ? strText.slice(1) : '';\n  return strText.charAt(0).toLocaleUpperCase() + strAfterFirst;\n}\n\nexport { capitalize };\n","import './index.css';\n\nimport { createElement } from '../../helpers/create-element';\nimport { GameBoard } from '../../game-board';\nimport { gameEvents } from '../../game-events';\n\n/**\n * Creates a player's board UI component\n * @param {GameBoard} playerGameBoard - An instance of 'GameBoard'\n * @param {boolean} hidden - Hidden player's ships indicator\n * @param {boolean} disabled - If true, the returned board' UI will look disabled\n * @param {boolean} clickable - If true, the returned board won't listen to 'click' events\n * @returns {HTMLDivElement}\n */\nexport default function Board(playerGameBoard, hidden, disabled, clickable) {\n  [playerGameBoard, hidden, disabled].forEach((arg) => {\n    if (arg === undefined) {\n      throw TypeError(\"'Board' is called with an invalid number of arguments!\");\n    }\n  });\n\n  if (!(playerGameBoard instanceof GameBoard)) {\n    throw TypeError(\n      `'Board' is called with invalid 'playerGameBoard'! Given '${playerGameBoard}'.`,\n    );\n  }\n\n  if (typeof hidden !== 'boolean' || typeof disabled !== 'boolean') {\n    throw TypeError(\n      `'Board' expects 'hidden' & 'disabled' of type 'boolean'! Given '${hidden} & ${disabled}'.`,\n    );\n  }\n\n  const board = createElement(\n    'div',\n    'board-container' + (disabled ? ' disabled' : ''),\n  );\n\n  let boardWidth = 0;\n\n  playerGameBoard.board.forEach((row, i) => {\n    boardWidth = row.length;\n    row.forEach((cell, j) => {\n      let className = 'board-cell';\n      if (cell.ship) {\n        if (!hidden) className += ' ship';\n        if (cell.ship.isSunk()) className += ' sunk';\n        else if (cell.attacked) className += ' attacked';\n      } else if (cell.missed) className += ' missed';\n      const boardCell = createElement('div', className);\n      if (clickable) {\n        boardCell.addEventListener('click', () => {\n          gameEvents.emit(gameEvents.ATTACK, [i, j]);\n        });\n      }\n      board.appendChild(boardCell);\n    });\n  });\n\n  // Grid styles\n  board.style.display = 'grid';\n  board.style.gridTemplateColumns = `repeat(${boardWidth}, 1fr)`;\n  board.style.gridTemplateRows = `repeat(${boardWidth}, auto)`;\n\n  return board;\n}\n\nexport { Board };\n","import './index.css';\n\nimport { createElement } from './helpers/create-element';\nimport { createGame } from './helpers/create-game';\nimport { gameEvents } from './game-events';\n\nconst [header, gameContainer] = [\n  createElement('h1', 'head', 'Odin Battleship'),\n  createElement('div', 'game-container'),\n];\n\n// Initiate a game logic object\nconst game = createGame(gameContainer);\n\ngameEvents.add(gameEvents.GAME_OVER, () => {\n  game.endCurrentGame();\n  const endMessage = game.isComputerWon() ? 'Game Over!' : 'You Win!';\n  const [dialog, message, question, cancelBtn, playAgainBtn] = [\n    createElement('dialog', 'game-over'),\n    createElement('h2', 'message', endMessage),\n    createElement('p', 'question', 'Do want to play again?'),\n    createElement('button', 'cancel-btn', 'Cancel', ['type', 'button']),\n    createElement('button', 'play-again-btn', 'Play Again', ['type', 'button']),\n  ];\n  dialog.addEventListener('close', () => document.body.removeChild(dialog));\n  cancelBtn.addEventListener('click', () => dialog.close());\n  playAgainBtn.addEventListener('click', () => {\n    game.startNewGame();\n    dialog.close();\n  });\n  dialog.append(message, question, cancelBtn, playAgainBtn);\n  document.body.append(dialog);\n  dialog.showModal();\n});\n\ngame.startNewGame();\n\ndocument.body.append(header, gameContainer);\n"],"names":["createElement","tagName","className","textContent","_len","arguments","length","attrs","Array","_key","TypeError","element","document","isArray","flat","i","setAttribute","REGISTRY","add","eventName","callbacks","every","c","strArgs","concat","toString","replace","_REGISTRY$eventName","push","apply","remove","callback","filter","registeredCallback","emit","_len2","args","_key2","forEach","Object","freeze","prototype","gameEvents","ATTACK","HIT","MISS","LOSS","GAME_OVER","Ship","Number","isInteger","hits","sunk","hit","isSunk","ship","setPrototypeOf","config","configurable","enumerable","configExt","_objectSpread","writable","defineProperties","constructor","value","get","GameBoard","board","j","attacked","missed","getRandomUpToButNotIncluding","n","Math","floor","random","isEmptyCell","_ref","_ref2","_slicedToArray","getValidShipArea","firstCellPlace","direction","result","currentCellPlace","randomizationFailed","insertShipInRandomBoardPlace","shipArea","loopsCount","movingAxis","fixedAxis","randomCellPlace","_ref3","_ref4","ships","gameBoard","receiveAttack","_ref5","_ref6","BOARD_SIDE_LENGTH","cell","defineProperty","Player","playerType","undefined","TYPES","COMPUTER","HUMAN","player","type","_player$gameBoard$boa","_player$gameBoard$boa2","maxHeight","maxWidth","target","validTargetsPairs","previousDirection","smartTarget","validAdjacentCellsOrNulls","validAdjacentCellsIndexes","dirMod","cellPair","adjacentCellPair","some","includes","play","randomTargetIndex","splice","findIndex","createNewState","playersData","name","playerUI","currentPlayerIndex","allPlayersDisabled","switchCurrentPlayer","this","renderPlayerUI","playerIndex","parentElement","playerData","currentPlayer","disabled","clickable","_toConsumableArray","children","child","append","typeIndicator","text","strText","strAfterFirst","playerInfo","nameIndicator","String","slice","charAt","toLocaleUpperCase","playerName","PlayerInfo","playerGameBoard","hidden","arg","boardWidth","row","boardCell","addEventListener","appendChild","style","display","gridTemplateColumns","gridTemplateRows","Board","renderAllPlayersUI","playIfComputerTurn","setTimeout","isComputerCurrentPlayer","gameState","evaluatingAttack","attackHandler","cellPlacePair","opponentIndex","hitHandler","missHandler","lossHandler","header","gameContainer","game","startNewGame","isComputerWon","endCurrentGame","createGame","endMessage","dialog","message","question","cancelBtn","playAgainBtn","body","removeChild","close","showModal"],"sourceRoot":""}