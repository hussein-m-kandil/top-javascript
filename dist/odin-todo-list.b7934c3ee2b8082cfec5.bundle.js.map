{"version":3,"file":"odin-todo-list.b7934c3ee2b8082cfec5.bundle.js","mappings":"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","sources":["webpack://top-javascript-study/./node_modules/date-fns/toDate.mjs","webpack://top-javascript-study/./node_modules/date-fns/isEqual.mjs","webpack://top-javascript-study/./node_modules/date-fns/isAfter.mjs","webpack://top-javascript-study/./node_modules/date-fns/constructFrom.mjs","webpack://top-javascript-study/./node_modules/date-fns/constants.mjs","webpack://top-javascript-study/./node_modules/date-fns/addHours.mjs","webpack://top-javascript-study/./node_modules/date-fns/addMilliseconds.mjs","webpack://top-javascript-study/./odin-todo-list/helpers/createElement.js","webpack://top-javascript-study/./odin-todo-list/helpers/TodoListEvents.js","webpack://top-javascript-study/./odin-todo-list/components/Button/index.js","webpack://top-javascript-study/./node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs","webpack://top-javascript-study/./node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","webpack://top-javascript-study/./node_modules/date-fns/locale/en-US/_lib/formatLong.mjs","webpack://top-javascript-study/./node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs","webpack://top-javascript-study/./node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","webpack://top-javascript-study/./node_modules/date-fns/locale/_lib/buildMatchFn.mjs","webpack://top-javascript-study/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs","webpack://top-javascript-study/./node_modules/date-fns/locale/en-US.mjs","webpack://top-javascript-study/./node_modules/date-fns/locale/en-US/_lib/localize.mjs","webpack://top-javascript-study/./node_modules/date-fns/locale/en-US/_lib/match.mjs","webpack://top-javascript-study/./node_modules/date-fns/_lib/defaultOptions.mjs","webpack://top-javascript-study/./node_modules/date-fns/startOfDay.mjs","webpack://top-javascript-study/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs","webpack://top-javascript-study/./node_modules/date-fns/getDayOfYear.mjs","webpack://top-javascript-study/./node_modules/date-fns/differenceInCalendarDays.mjs","webpack://top-javascript-study/./node_modules/date-fns/startOfYear.mjs","webpack://top-javascript-study/./node_modules/date-fns/startOfWeek.mjs","webpack://top-javascript-study/./node_modules/date-fns/startOfISOWeek.mjs","webpack://top-javascript-study/./node_modules/date-fns/getISOWeekYear.mjs","webpack://top-javascript-study/./node_modules/date-fns/getISOWeek.mjs","webpack://top-javascript-study/./node_modules/date-fns/startOfISOWeekYear.mjs","webpack://top-javascript-study/./node_modules/date-fns/getWeekYear.mjs","webpack://top-javascript-study/./node_modules/date-fns/getWeek.mjs","webpack://top-javascript-study/./node_modules/date-fns/startOfWeekYear.mjs","webpack://top-javascript-study/./node_modules/date-fns/_lib/addLeadingZeros.mjs","webpack://top-javascript-study/./node_modules/date-fns/_lib/format/lightFormatters.mjs","webpack://top-javascript-study/./node_modules/date-fns/_lib/format/formatters.mjs","webpack://top-javascript-study/./node_modules/date-fns/_lib/format/longFormatters.mjs","webpack://top-javascript-study/./node_modules/date-fns/_lib/protectedTokens.mjs","webpack://top-javascript-study/./node_modules/date-fns/isDate.mjs","webpack://top-javascript-study/./node_modules/date-fns/format.mjs","webpack://top-javascript-study/./node_modules/date-fns/isValid.mjs","webpack://top-javascript-study/./odin-todo-list/components/TodoForm/index.js","webpack://top-javascript-study/./node_modules/date-fns/compareAsc.mjs","webpack://top-javascript-study/./node_modules/date-fns/isLastDayOfMonth.mjs","webpack://top-javascript-study/./node_modules/date-fns/endOfDay.mjs","webpack://top-javascript-study/./node_modules/date-fns/endOfMonth.mjs","webpack://top-javascript-study/./node_modules/date-fns/differenceInMonths.mjs","webpack://top-javascript-study/./node_modules/date-fns/differenceInCalendarMonths.mjs","webpack://top-javascript-study/./node_modules/date-fns/differenceInSeconds.mjs","webpack://top-javascript-study/./node_modules/date-fns/differenceInMilliseconds.mjs","webpack://top-javascript-study/./node_modules/date-fns/_lib/getRoundingMethod.mjs","webpack://top-javascript-study/./node_modules/date-fns/formatDistanceToNow.mjs","webpack://top-javascript-study/./node_modules/date-fns/formatDistance.mjs","webpack://top-javascript-study/./node_modules/date-fns/isSameDay.mjs","webpack://top-javascript-study/./node_modules/date-fns/isTomorrow.mjs","webpack://top-javascript-study/./node_modules/date-fns/addDays.mjs","webpack://top-javascript-study/./odin-todo-list/components/TodoCard/index.js","webpack://top-javascript-study/./node_modules/date-fns/isPast.mjs","webpack://top-javascript-study/./node_modules/date-fns/isToday.mjs","webpack://top-javascript-study/./odin-todo-list/helpers/capitalize.js","webpack://top-javascript-study/./odin-todo-list/index.js","webpack://top-javascript-study/./odin-todo-list/components/DropDownMenu/index.js","webpack://top-javascript-study/./odin-todo-list/components/DeleteTodoForm/index.js"],"sourcesContent":["/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The dates are equal\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * const result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\nexport function isEqual(leftDate, rightDate) {\n  const _dateLeft = toDate(leftDate);\n  const _dateRight = toDate(rightDate);\n  return +_dateLeft === +_dateRight;\n}\n\n// Fallback for modularized imports:\nexport default isEqual;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date that should be after the other one to return true\n * @param dateToCompare - The date to compare with\n *\n * @returns The first date is after the second date\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\nexport function isAfter(date, dateToCompare) {\n  const _date = toDate(date);\n  const _dateToCompare = toDate(dateToCompare);\n  return _date.getTime() > _dateToCompare.getTime();\n}\n\n// Fallback for modularized imports:\nexport default isAfter;\n","/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\nimport { millisecondsInHour } from \"./constants.mjs\";\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added.\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount) {\n  return addMilliseconds(date, amount * millisecondsInHour);\n}\n\n// Fallback for modularized imports:\nexport default addHours;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount) {\n  const timestamp = +toDate(date);\n  return constructFrom(date, timestamp + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;\n","/**\n * Creates HTMLElement of the given 'tagName' with any of the given\n * className, id or attributes\n * @param {string} tagName\n * @param {string?} className\n * @param {string?} textContent\n * @param {Array<string, string>?} attrs\n * - Any number of attributes (each of which as a key-value pair)\n * @returns {HTMLElement}\n */\nexport default function createElement(\n  tagName,\n  className,\n  textContent,\n  ...attrs\n) {\n  if (typeof tagName !== \"string\") {\n    throw TypeError(\"Missing 'tagName' of type 'string'!\");\n  }\n  const element = document.createElement(tagName);\n  if (className) element.className = className;\n  if (textContent) element.textContent = textContent;\n  // Flatten attrs 1 level depth (in case attrs is in the form of an Array of paris)\n  if (\n    attrs.length === 1 &&\n    Array.isArray(attrs[0]) &&\n    Array.isArray(attrs[0][0])\n  ) {\n    attrs = attrs.flat(1);\n  }\n  if (attrs.length > 0) {\n    for (let i = 0; i < attrs.length; i++) {\n      if (\n        Array.isArray(attrs[i]) &&\n        attrs[i].length === 2 &&\n        attrs[i][0] &&\n        typeof attrs[i][0] === \"string\"\n      ) {\n        if (attrs[i][1] || attrs[i][1] === 0 || attrs[i][1] === \"\") {\n          element.setAttribute(attrs[i][0], attrs[i][1]);\n        }\n      } else {\n        throw TypeError(\n          \"A given attribute in '...attrs' must be in the form of [string, string]\"\n        );\n      }\n    }\n  }\n  return element;\n}\n\nexport { createElement };\n","const eventRegistry = {};\n\nconst TodoListEvents = {\n  CREATE_NEW_TODO: \"create-new-todo\",\n  NEW_TODO_CREATED: \"new-todo-created\",\n  EDIT_TODO: \"edit-todo\",\n  TODO_EDITED: \"todo-edited\",\n  DELETE_TODO: \"delete-todo\",\n  CANCEL_DELETE_TODO: \"cancel-delete-todo\",\n  CONFIRM_DELETE_TODO: \"confirm-delete-todo\",\n\n  add(eventName, ...callbacks) {\n    if (!eventRegistry[eventName]) {\n      eventRegistry[eventName] = [];\n    }\n    callbacks.forEach((callback) => eventRegistry[eventName].push(callback));\n  },\n\n  remove(eventName, callbacks) {\n    if (eventRegistry[eventName]) {\n      eventRegistry[eventName].forEach((handler, i) => {\n        if (callbacks.includes(handler)) {\n          eventRegistry[eventName].splice(i, 1);\n        }\n      });\n    }\n  },\n\n  emit(eventName, data) {\n    if (eventRegistry[eventName]) {\n      eventRegistry[eventName].forEach((handler) => handler(data));\n    }\n  },\n};\n\nObject.freeze(TodoListEvents);\nObject.freeze(TodoListEvents.add);\nObject.freeze(TodoListEvents.remove);\nObject.freeze(TodoListEvents.emit);\n\nexport default TodoListEvents;\nexport { TodoListEvents };\n","import \"./index.css\";\n\nimport createElement from \"../../helpers/createElement.js\";\n\n/**\n * Creates HTML button element\n * @param {{className: string?, type: string?, textContent: string?}} props\n * @returns {HTMLButtonElement}\n */\nexport default function Button(props) {\n  const className = props.className ? props.className + \" hmk-btn\" : \" hmk-btn\";\n  const button = createElement(\n    \"button\",\n    className,\n    props.textContent,\n    props.type ? [\"type\", props.type] : [\"type\", \"button\"]\n  );\n\n  return button;\n}\n\nexport { Button };\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { toDate } from \"../toDate.mjs\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date) {\n  return startOfWeek(date, { weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date) {\n  const _date = toDate(date);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date) {\n  const year = getISOWeekYear(date);\n  const fourthOfJanuary = constructFrom(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import \"./index.css\";\n\nimport { format as formatDate, isEqual, isAfter, addHours } from \"date-fns\";\nimport createElement from \"../../helpers/createElement.js\";\nimport TodoListEvents from \"../../helpers/TodoListEvents.js\";\nimport Button from \"../Button\";\n\n/**\n * Creates form for edit todo's info or make new todo.\n * @param {{\n *  id: string,\n *  title: string,\n *  description: string,\n *  dueDate: Date,\n *  priority: string\n * }?} todoInfo - If preset, then, it will be edit todo form\n * @returns {HTMLFormElement}\n */\nexport default function TodoForm(todoInfo) {\n  // Current time\n  const currentDateTime = formatDate(new Date(), \"yyyy-MM-dd'T'HH:mm\");\n  const defaultDateTime = todoInfo\n    ? formatDate(todoInfo.dueDate, \"yyyy-MM-dd'T'HH:mm\")\n    : formatDate(addHours(new Date(), 2), \"yyyy-MM-dd'T'HH:mm\");\n\n  // Characters limits\n  const TITLE_MAX_CHARS = 50;\n  const DESC_MAX_CHARS = 250;\n\n  // Form\n  const todoForm = createElement(\n    \"form\",\n    \"todo-form\",\n    null,\n    [\"action\", \"\"],\n    [\"method\", \"get\"]\n  );\n\n  // Title\n  const titleDiv = createElement(\"div\", \"title\");\n  const titleLabel = createElement(\"label\", \"title\", \"Title \", [\n    \"for\",\n    \"title\",\n  ]);\n  const titleCharLimitSpan = createElement(\"span\", \"char-limit\");\n  const titleTypedCharsSpan = createElement(\"span\", \"typed-chars\", \"0\");\n  const titleCharLimitSepSpan = createElement(\"span\", \"char-limit-sep\", \" / \");\n  const titleRemainCharsSpan = createElement(\n    \"span\",\n    \"remain-chars\",\n    \"\" + TITLE_MAX_CHARS\n  );\n  const titleInput = createElement(\n    \"input\",\n    \"title\",\n    null,\n    [\"id\", \"title\"],\n    [\"name\", \"title\"],\n    [\"type\", \"text\"],\n    [\"value\", todoInfo ? todoInfo.title : \"\"],\n    [\"autocomplete\", \"on\"],\n    [\"autofocus\", \"\"],\n    [\"maxlength\", \"\" + TITLE_MAX_CHARS],\n    [\"required\", \"\"]\n  );\n  titleCharLimitSpan.append(\n    titleTypedCharsSpan,\n    titleCharLimitSepSpan,\n    titleRemainCharsSpan\n  );\n  titleLabel.append(titleCharLimitSpan);\n  titleDiv.append(titleLabel, titleInput);\n  titleInput.addEventListener(\"input\", () => {\n    if (titleInput.value.length > TITLE_MAX_CHARS) {\n      titleInput.value = titleInput.value.slice(0, TITLE_MAX_CHARS);\n    }\n    titleTypedCharsSpan.textContent = titleInput.value.length;\n    titleRemainCharsSpan.textContent =\n      TITLE_MAX_CHARS - titleInput.value.length;\n  });\n\n  // Description\n  const descriptionDiv = createElement(\"div\", \"description\");\n  const descriptionLabel = createElement(\n    \"label\",\n    \"description\",\n    \"Description \",\n    [\"for\", \"description\"]\n  );\n  const descCharLimitSpan = createElement(\"span\", \"char-limit\");\n  const descTypedCharsSpan = createElement(\"span\", \"typed-chars\", \"0\");\n  const descCharLimitSepSpan = createElement(\"span\", \"char-limit-sep\", \" / \");\n  const descRemainCharsSpan = createElement(\n    \"span\",\n    \"remain-chars\",\n    \"\" + DESC_MAX_CHARS\n  );\n  const descriptionText = createElement(\n    \"textarea\",\n    \"description\",\n    todoInfo ? todoInfo.description : null,\n    [\"id\", \"description\"],\n    [\"name\", \"description\"],\n    [\"maxlength\", \"\" + DESC_MAX_CHARS]\n  );\n  descCharLimitSpan.append(\n    descTypedCharsSpan,\n    descCharLimitSepSpan,\n    descRemainCharsSpan\n  );\n  descriptionLabel.append(descCharLimitSpan);\n  descriptionDiv.append(descriptionLabel, descriptionText);\n  descriptionText.addEventListener(\"input\", () => {\n    if (descriptionText.value.length > DESC_MAX_CHARS) {\n      descriptionText.value = descriptionText.value.slice(0, DESC_MAX_CHARS);\n    }\n    descTypedCharsSpan.textContent = descriptionText.value.length;\n    descRemainCharsSpan.textContent =\n      DESC_MAX_CHARS - descriptionText.value.length;\n  });\n\n  // Due date\n  const dueDateDiv = createElement(\"div\", \"due-date\");\n  const dueDateLabel = createElement(\"label\", \"due-date\", \"Due Date \", [\n    \"for\",\n    \"due-date\",\n  ]);\n  const dueDateInput = createElement(\n    \"input\",\n    \"due-date\",\n    null,\n    [\"id\", \"due-date\"],\n    [\"name\", \"due-date\"],\n    [\"type\", \"datetime-local\"],\n    [\"value\", defaultDateTime],\n    [\"min\", currentDateTime],\n    [\"required\", \"\"]\n  );\n  dueDateDiv.append(dueDateLabel, dueDateInput);\n\n  // Priority\n  const priorityFieldset = createElement(\"fieldset\", \"priority\");\n  const priorityLegend = createElement(\"legend\", \"priority\", \"Priority \");\n  const highPriorityDiv = createElement(\"div\", \"priority\");\n  const highPriorityLabel = createElement(\"label\", \"priority\", \"High \", [\n    \"for\",\n    \"high-priority\",\n  ]);\n  const highPriorityRadio = createElement(\n    \"input\",\n    \"priority\",\n    null,\n    [\"id\", \"high-priority\"],\n    [\"name\", \"priority\"],\n    [\"value\", \"high\"],\n    [\"type\", \"radio\"]\n  );\n  highPriorityDiv.append(highPriorityRadio, highPriorityLabel);\n  const mediumPriorityDiv = createElement(\"div\", \"priority\");\n  const mediumPriorityLabel = createElement(\"label\", \"priority\", \"Medium \", [\n    \"for\",\n    \"medium-priority\",\n  ]);\n  const mediumPriorityRadio = createElement(\n    \"input\",\n    \"priority\",\n    null,\n    [\"type\", \"radio\"],\n    [\"id\", \"medium-priority\"],\n    [\"name\", \"priority\"],\n    [\"value\", \"medium\"]\n  );\n  mediumPriorityDiv.append(mediumPriorityRadio, mediumPriorityLabel);\n  const lowPriorityDiv = createElement(\"div\", \"priority\");\n  const lowPriorityLabel = createElement(\"label\", \"priority\", \"Low \", [\n    \"for\",\n    \"low-priority\",\n  ]);\n  const lowPriorityRadio = createElement(\n    \"input\",\n    \"priority\",\n    null,\n    [\"id\", \"low-priority\"],\n    [\"name\", \"priority\"],\n    [\"value\", \"low\"],\n    [\"type\", \"radio\"]\n  );\n  lowPriorityDiv.append(lowPriorityRadio, lowPriorityLabel);\n  if (todoInfo) {\n    switch (todoInfo.priority) {\n      case \"low\":\n        lowPriorityRadio.checked = true;\n        break;\n      case \"high\":\n        highPriorityRadio.checked = true;\n        break;\n      default:\n        mediumPriorityRadio.checked = true;\n        break;\n    }\n  } else {\n    mediumPriorityRadio.checked = true;\n  }\n  priorityFieldset.append(\n    priorityLegend,\n    highPriorityDiv,\n    mediumPriorityDiv,\n    lowPriorityDiv\n  );\n\n  // Submit\n  const submitDiv = createElement(\"div\", \"submit\");\n  const submitButton = Button({\n    className: \"submit\",\n    type: \"submit\",\n    textContent: todoInfo ? \"Confirm Todo Edit\" : \"Create New Todo\",\n  });\n  submitDiv.appendChild(submitButton);\n\n  // Append all controls to form\n  todoForm.append(\n    titleDiv,\n    descriptionDiv,\n    dueDateDiv,\n    priorityFieldset,\n    submitDiv\n  );\n\n  // Handle form submission\n  todoForm.addEventListener(\"submit\", (event) => {\n    event.preventDefault();\n    const form = event.target;\n    // Validate title field\n    if (!form[\"title\"].value) {\n      form[\"title\"].setCustomValidity(\"Todo's title cannot be empty!\");\n      form[\"title\"].addEventListener(\"input\", () => {\n        form[\"title\"].setCustomValidity(\"\");\n      });\n    }\n    // Validate due date field\n    if (\n      !isEqual(new Date(form[\"due-date\"].value), new Date(currentDateTime)) &&\n      !isAfter(new Date(form[\"due-date\"].value), new Date(currentDateTime))\n    ) {\n      form[\"due-date\"].setCustomValidity(\n        \"The date/time must be after or equal to the current date/time!\"\n      );\n      form[\"due-date\"].addEventListener(\"change\", () => {\n        form[\"due-date\"].setCustomValidity(\"\");\n      });\n    }\n    // Emit create new Todo event\n    const newTodoInfo = {\n      title: form[\"title\"].value,\n      description: form[\"description\"].value,\n      dueDate: new Date(form[\"due-date\"].value),\n      priority: form[\"priority\"].value,\n    };\n    if (todoInfo) {\n      TodoListEvents.emit(\n        TodoListEvents.TODO_EDITED,\n        Object.assign({}, todoInfo, newTodoInfo)\n      );\n    } else {\n      TodoListEvents.emit(TodoListEvents.CREATE_NEW_TODO, newTodoInfo);\n    }\n  });\n\n  return todoForm;\n}\n\nexport { TodoForm };\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport function compareAsc(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const diff = _dateLeft.getTime() - _dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n\n// Fallback for modularized imports:\nexport default compareAsc;\n","import { endOfDay } from \"./endOfDay.mjs\";\nimport { endOfMonth } from \"./endOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date) {\n  const _date = toDate(date);\n  return +endOfDay(_date) === +endOfMonth(_date);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date) {\n  const _date = toDate(date);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const sign = compareAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(\n    differenceInCalendarMonths(_dateLeft, _dateRight),\n  );\n  let result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    let isLastMonthNotFull = compareAsc(_dateLeft, _dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if (\n      isLastDayOfMonth(toDate(dateLeft)) &&\n      difference === 1 &&\n      compareAsc(dateLeft, _dateRight) === 1\n    ) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();\n  const monthDiff = _dateLeft.getMonth() - _dateRight.getMonth();\n\n  return yearDiff * 12 + monthDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(dateLeft, dateRight, options) {\n  const diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(dateLeft, dateRight) {\n  return +toDate(dateLeft) - +toDate(dateRight);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","import { formatDistance } from \"./formatDistance.mjs\";\n\n/**\n * The {@link formatDistanceToNow} function options.\n */\n\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - The object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistanceToNow(date, options) {\n  return formatDistance(date, Date.now(), options);\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceToNow;\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { minutesInDay, minutesInMonth } from \"./constants.mjs\";\nimport { differenceInMonths } from \"./differenceInMonths.mjs\";\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport function formatDistance(date, baseDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = compareAsc(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = toDate(baseDate);\n    dateRight = toDate(date);\n  } else {\n    dateLeft = toDate(date);\n    dateRight = toDate(baseDate);\n  }\n\n  const seconds = differenceInSeconds(dateRight, dateLeft);\n  const offsetInSeconds =\n    (getTimezoneOffsetInMilliseconds(dateRight) -\n      getTimezoneOffsetInMilliseconds(dateLeft)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < minutesInMonth) {\n    const days = Math.round(minutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < minutesInMonth * 2) {\n    months = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistance;\n","import { startOfDay } from \"./startOfDay.mjs\";\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n\n * @returns The dates are in the same day (and year and month)\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nexport function isSameDay(dateLeft, dateRight) {\n  const dateLeftStartOfDay = startOfDay(dateLeft);\n  const dateRightStartOfDay = startOfDay(dateRight);\n\n  return +dateLeftStartOfDay === +dateRightStartOfDay;\n}\n\n// Fallback for modularized imports:\nexport default isSameDay;\n","import { addDays } from \"./addDays.mjs\";\nimport { isSameDay } from \"./isSameDay.mjs\";\n\n/**\n * @name isTomorrow\n * @category Day Helpers\n * @summary Is the given date tomorrow?\n * @pure false\n *\n * @description\n * Is the given date tomorrow?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is tomorrow\n *\n * @example\n * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?\n * const result = isTomorrow(new Date(2014, 9, 7, 14, 0))\n * //=> true\n */\nexport function isTomorrow(date) {\n  return isSameDay(date, addDays(Date.now(), 1));\n}\n\n// Fallback for modularized imports:\nexport default isTomorrow;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import \"./index.css\";\n\nimport createElement from \"../../helpers/createElement.js\";\nimport capitalize from \"../../helpers/capitalize.js\";\nimport {\n  isDate,\n  isToday,\n  isTomorrow,\n  isPast,\n  formatDate,\n  formatDistanceToNow,\n} from \"date-fns\";\nimport Button from \"../Button\";\nimport TodoListEvents from \"../../helpers/TodoListEvents.js\";\n\n/**\n *\n * @param {{\n *  id: string,\n *  title: string,\n *  description: string,\n *  dueDate: Date,\n *  priority: string\n * }} todoInfo\n * @param {boolean?} hideControllers - If true, returns todo card without edit/delete controllers\n * @returns {HTMLDivElement}\n */\nexport default function TodoCard(todoInfo, hideControllers) {\n  // Prepare todo due date\n  let overdue = false;\n  let dueDateText = \"Due \";\n  if (isDate(todoInfo.dueDate)) {\n    if (isPast(todoInfo.dueDate, new Date())) {\n      overdue = true;\n      dueDateText = \"\" + formatDistanceToNow(todoInfo.dueDate) + \" Overdue!\";\n    } else if (isToday(todoInfo.dueDate)) {\n      dueDateText += \"today at \" + formatDate(todoInfo.dueDate, \"hh:mm a\");\n    } else if (isTomorrow(todoInfo.dueDate)) {\n      dueDateText += \"tomorrow at \" + formatDate(todoInfo.dueDate, \"hh:mm a\");\n    } else {\n      dueDateText += formatDistanceToNow(todoInfo.dueDate);\n    }\n  } else {\n    dueDateText += todoInfo.dueDate;\n  }\n\n  // Create card elements\n  const todoCard = createElement(\"div\", \"todo-card\");\n  const title = createElement(\"div\", \"title\", todoInfo.title);\n  const dueDate = createElement(\n    \"div\",\n    \"due-date\" + (overdue ? \" overdue\" : \"\"),\n    dueDateText\n  );\n  const description = createElement(\n    \"div\",\n    \"description\",\n    todoInfo.description ? todoInfo.description : \"...\"\n  );\n  const priority = createElement(\n    \"div\",\n    \"priority \" + todoInfo.priority,\n    capitalize(todoInfo.priority) + \" priority\"\n  );\n  // Check whether to hide controllers\n  if (!hideControllers) {\n    const editButton = Button({\n      className: \"edit\",\n      type: \"button\",\n      textContent: \"Edit\",\n    });\n    const deleteButton = Button({\n      className: \"delete\",\n      type: \"button\",\n      textContent: \"Delete\",\n    });\n\n    editButton.addEventListener(\"click\", () => {\n      TodoListEvents.emit(TodoListEvents.EDIT_TODO, todoInfo.id);\n    });\n    deleteButton.addEventListener(\"click\", () => {\n      TodoListEvents.emit(TodoListEvents.DELETE_TODO, todoInfo.id);\n    });\n\n    // Append card elements\n    todoCard.append(\n      title,\n      dueDate,\n      description,\n      priority,\n      editButton,\n      deleteButton\n    );\n  } else {\n    // Append card elements\n    todoCard.append(title, dueDate, description, priority);\n  }\n\n  return todoCard;\n}\n\nexport { TodoCard };\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isPast\n * @category Common Helpers\n * @summary Is the given date in the past?\n * @pure false\n *\n * @description\n * Is the given date in the past?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is in the past\n *\n * @example\n * // If today is 6 October 2014, is 2 July 2014 in the past?\n * const result = isPast(new Date(2014, 6, 2))\n * //=> true\n */\nexport function isPast(date) {\n  return +toDate(date) < Date.now();\n}\n\n// Fallback for modularized imports:\nexport default isPast;\n","import { isSameDay } from \"./isSameDay.mjs\";\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is today\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nexport function isToday(date) {\n  return isSameDay(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default isToday;\n","/**\n * Returns same string with the first character capitalized.\n * @param {string} text - Text to capitalize\n * @return {string} - Same string with first character capitalized\n */\nexport default function capitalize(text) {\n  const strText = String(text);\n  const strAfterFirst = strText.length > 1 ? strText.slice(1) : \"\";\n  return strText.charAt(0).toLocaleUpperCase() + strAfterFirst;\n}\n\nexport { capitalize };\n","import \"./index.css\";\n\nimport { isEqual, isAfter, addHours } from \"date-fns\";\nimport createElement from \"./helpers/createElement.js\";\nimport TodoListEvents from \"./helpers/TodoListEvents.js\";\nimport DeleteTodoForm from \"./components/DeleteTodoForm\";\nimport DropDownMenu from \"./components/DropDownMenu\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoCard from \"./components/TodoCard\";\nimport Button from \"./components/Button\";\n\nconst STORAGE_KEY_NAME = \"todo-info-list\";\n\nconst generateId = () => {\n  return `${Math.random()}${new Date().getTime()}`.slice(2);\n};\n\nlet todoInfoList = [],\n  todoSamples = false,\n  formPresented = false,\n  todoToEdit = null,\n  todoToDelete = null;\n\n// Header\nconst header = createElement(\"header\", \"todo-header\");\nheader.appendChild(createElement(\"h1\", \"todo-head\", \"Odin Todo List\"));\n\n// Main\nconst main = createElement(\"main\");\n\n// Add new todo button\nconst newTodoButton = Button({\n  className: \"new-todo\",\n  type: \"button\",\n  textContent: \"Add New Todo\",\n});\nnewTodoButton.addEventListener(\"click\", () => {\n  if (!formPresented) {\n    showTodoForm();\n  } else {\n    removeTodoForm();\n  }\n});\nheader.appendChild(newTodoButton);\n\n// Projects menu\nheader.appendChild(DropDownMenu());\n\n// Listen to todo list events\nTodoListEvents.add(TodoListEvents.CREATE_NEW_TODO, (todoInfo) => {\n  // Remove sample todos if it is the first todo\n  if (todoSamples) {\n    todoInfoList.splice(0, todoInfoList.length);\n    todoSamples = false;\n  }\n  todoInfo.id = generateId();\n  todoInfoList.push(todoInfo);\n  // Sort the todos based on dueDate\n  todoInfoList.sort((a, b) => {\n    if (isEqual(a.dueDate, b.dueDate)) {\n      return 0;\n    } else if (isAfter(a.dueDate, b.dueDate)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n  removeTodoForm();\n});\nTodoListEvents.add(TodoListEvents.EDIT_TODO, (todoId) => {\n  showTodoForm(todoId);\n});\nTodoListEvents.add(TodoListEvents.TODO_EDITED, (todoInfo) => {\n  // Use todoToEdit global variable to update the todo with edits, then, reset it.\n  if (todoToEdit && todoToEdit.id === todoInfo.id) {\n    Object.assign(todoToEdit, todoInfo);\n  } else {\n    throw Error(\"Todo edit cannot be confirmed!\");\n  }\n  todoToEdit = null;\n  removeTodoForm();\n});\nTodoListEvents.add(TodoListEvents.DELETE_TODO, (todoId) => {\n  // Show delete confirmation form.\n  showDeleteTodoForm(todoId);\n});\nTodoListEvents.add(TodoListEvents.CONFIRM_DELETE_TODO, () => {\n  // Use the global variable 'todoToDelete' to delete the todo from the list.\n  if (todoToDelete) {\n    todoInfoList.splice(todoInfoList.indexOf(todoToDelete), 1);\n  } else {\n    throw Error(\"Todo delete cannot be confirmed!\");\n  }\n  // Reset the global variable 'todoToDelete'\n  todoToDelete = null;\n  removeTodoForm();\n});\nTodoListEvents.add(TodoListEvents.CANCEL_DELETE_TODO, () => {\n  todoToDelete = null;\n  removeTodoForm();\n});\n\n// Local storage logic\nif (localStorage) {\n  // Get stored data\n  let storedTodoInfoList = localStorage.getItem(STORAGE_KEY_NAME);\n  if (storedTodoInfoList) {\n    storedTodoInfoList = JSON.parse(storedTodoInfoList, (key, value) => {\n      if (key === \"dueDate\") {\n        return new Date(value);\n      }\n      return value;\n    });\n    if (storedTodoInfoList.length > 0) {\n      todoInfoList = storedTodoInfoList;\n    } else {\n      todoInfoList = getTodoSamples();\n      todoSamples = true;\n    }\n    showTodos();\n  }\n  // Store data\n  document.defaultView.addEventListener(\"beforeunload\", () => {\n    if (!todoSamples) {\n      localStorage.setItem(STORAGE_KEY_NAME, JSON.stringify(todoInfoList));\n    }\n  });\n}\n\n// Show result, then, Calculate main's top margin because header is fixed.\ndocument.body.append(header, main);\nmain.setAttribute(\n  \"style\",\n  `margin-top: calc(${header.offsetHeight}px + 1rem);`\n);\n\n// Manipulate main content\nfunction emptyMain() {\n  [...main.children].forEach((node) => main.removeChild(node));\n}\n\nfunction showTodos() {\n  todoInfoList.forEach((todoInfo) => main.appendChild(TodoCard(todoInfo)));\n}\n\nfunction showTodoForm(todoId) {\n  emptyMain();\n  // If todoId, so we need to assign the todo that has this id to the global variable todoToEdit\n  // then, give it to the form to be edit-todo form instead of create-new-todo form\n  if (todoId) {\n    for (let i = 0; i < todoInfoList.length; i++) {\n      if (todoInfoList[i].id === todoId) {\n        todoToEdit = todoInfoList[i];\n        main.appendChild(TodoForm(todoToEdit));\n        break;\n      }\n    }\n    if (!todoToEdit) {\n      main.appendChild(TodoForm());\n    }\n  } else {\n    main.appendChild(TodoForm());\n  }\n  newTodoButton.textContent = \"Home\";\n  formPresented = true;\n}\n\nfunction showDeleteTodoForm(todoId) {\n  // Find the todo and assign it to the global variable 'todoToDelete'\n  if (todoId) {\n    for (let i = 0; i < todoInfoList.length; i++) {\n      if (todoInfoList[i].id === todoId) {\n        todoToDelete = todoInfoList[i];\n        break;\n      }\n    }\n  }\n  if (todoToDelete) {\n    // Create new confirm delete todo form\n    emptyMain();\n    main.append(TodoCard(todoToDelete, true), DeleteTodoForm(todoToDelete));\n    newTodoButton.textContent = \"Home\";\n    formPresented = true;\n  } else {\n    throw Error(\"Cannot find a todo to delete!\");\n  }\n}\n\nfunction removeTodoForm() {\n  emptyMain();\n  showTodos();\n  formPresented = false;\n  newTodoButton.textContent = \"Add New Todo\";\n}\n\nfunction getTodoSamples() {\n  return [\n    {\n      id: generateId(),\n      title: \"Todo Sample #1\",\n      description: \"Sed consectetur adipiscing elit, sed do eiusmod.\",\n      dueDate: addHours(new Date(), 2),\n      priority: \"high\",\n    },\n    {\n      id: generateId(),\n      title: \"Todo Sample #2\",\n      description:\n        \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\" +\n        \" Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n      dueDate: addHours(new Date(), 4),\n      priority: \"medium\",\n    },\n    {\n      id: generateId(),\n      title: \"Todo Sample #3\",\n      description:\n        \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium\",\n      dueDate: addHours(new Date(), 6),\n      priority: \"low\",\n    },\n  ];\n}\n","import \"./index.css\";\n\nimport createElement from \"../../helpers/createElement.js\";\n\nexport default function DropDownMenu() {\n  const choices = [\"blah\", \"blah blah\", \"blah blah blah\"];\n  let opened = false,\n    currentChoiceIndex = 0;\n\n  // Create elements\n  const dropDownMenu = createElement(\n    \"div\",\n    \"hmk-drop-down-menu\",\n    null,\n    [\"tabindex\", \"0\"],\n    [\"role\", \"listbox\"]\n  );\n  const currentChoice = createElement(\"span\", \"hmk-current-choice\", choices[0]);\n  const choicesMenu = createElement(\"ul\", \"hmk-choices-menu hidden\", null, [\n    \"role\",\n    \"presentation\",\n  ]);\n  const choicesElements = [];\n  for (let i = 0; i < choices.length; i++) {\n    const choice = createElement(\n      \"li\",\n      \"hmk-choice\",\n      choices[i],\n      [\"tabindex\", \"0\"],\n      [\"role\", \"option\"],\n      i === currentChoiceIndex\n        ? [\"aria-selected\", \"true\"]\n        : [\"aria-selected\", \"false\"]\n    );\n    choice.addEventListener(\"click\", () => {\n      currentChoice.textContent = choice.textContent;\n      const siblings = [...choice.parentElement.children];\n      siblings.forEach((sibling) => {\n        sibling.setAttribute(\"aria-selected\", \"false\");\n      });\n      choice.setAttribute(\"aria-selected\", \"true\");\n      currentChoiceIndex = i;\n      // TODO: Emit project selected event\n    });\n    choicesElements.push(choice);\n  }\n\n  // Append elements\n  choicesMenu.append(...choicesElements);\n  dropDownMenu.append(currentChoice, choicesMenu);\n\n  // Handle events\n  dropDownMenu.addEventListener(\"click\", () => {\n    choicesMenu.classList.toggle(\"hidden\");\n    dropDownMenu.classList.toggle(\"open\");\n    opened = !opened;\n  });\n\n  document.addEventListener(\"click\", (event) => {\n    if (event.target !== dropDownMenu) {\n      choicesMenu.classList.add(\"hidden\");\n    }\n  });\n\n  document.addEventListener(\"keyup\", (event) => {\n    console.log(`code = ${event.code}, key = ${event.key}`);\n    // Only continue if the target is our menu or one of its children\n    if (\n      event.target === dropDownMenu ||\n      event.target.parentElement === choicesMenu\n    ) {\n      if (event.key === \"Enter\") {\n        event.target.click();\n      }\n      if (event.key === \"Escape\" && opened) {\n        event.preventDefault();\n        dropDownMenu.click();\n        dropDownMenu.focus();\n      }\n      // If ArrowDown/Up,\n      // Move down/up the menu if opened, else change the value.\n      if (event.key === \"ArrowDown\") {\n        event.preventDefault();\n        if (opened) {\n          if (\n            event.target === dropDownMenu ||\n            event.target === choicesMenu.lastChild\n          ) {\n            choicesMenu.firstChild?.focus();\n          } else {\n            event.target.nextSibling?.focus();\n          }\n        } else {\n          // If next index will be the end of the list,\n          // return the index to Zero (0)\n          if (currentChoiceIndex + 1 >= choices.length) {\n            currentChoiceIndex = 0;\n          } else {\n            currentChoiceIndex++;\n          }\n          currentChoice.textContent = choices[currentChoiceIndex];\n        }\n      } else if (event.key === \"ArrowUp\") {\n        event.preventDefault();\n        if (opened) {\n          if (\n            event.target === dropDownMenu ||\n            event.target === choicesMenu.firstChild\n          ) {\n            choicesMenu.lastChild?.focus();\n          } else {\n            // TODO: Try to use MenuElements\n            event.target.previousSibling?.focus();\n          }\n        } else {\n          // If next index will be the start of the list (0),\n          // return the index to list.length - 1\n          if (currentChoiceIndex - 1 < 0) {\n            currentChoiceIndex = choices.length - 1;\n          } else {\n            currentChoiceIndex--;\n          }\n          currentChoice.textContent = choices[currentChoiceIndex];\n        }\n      }\n    }\n  });\n\n  return dropDownMenu;\n}\n\nexport { DropDownMenu };\n","import \"./index.css\";\n\nimport createElement from \"../../helpers/createElement.js\";\nimport Button from \"../Button\";\nimport TodoListEvents from \"../../helpers/TodoListEvents\";\n\nexport default function DeleteTodoForm() {\n  const form = createElement(\"form\", \"del-todo-form\");\n  const message = createElement(\n    \"div\",\n    \"del-todo-msg\",\n    \"Are you sure you to DELETE this todo?\"\n  );\n  const buttonsDiv = createElement(\"div\", \"del-todo-options\");\n  const deleteButton = Button({\n    type: \"submit\",\n    className: \"del-todo-option del-todo-confirm\",\n    textContent: \"Yes, Delete.\",\n  });\n  const cancelButton = Button({\n    type: \"submit\",\n    className: \"del-todo-option del-todo-cancel\",\n    textContent: \"No, Cancel.\",\n  });\n\n  deleteButton.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n    TodoListEvents.emit(TodoListEvents.CONFIRM_DELETE_TODO);\n  });\n  cancelButton.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n    TodoListEvents.emit(TodoListEvents.CANCEL_DELETE_TODO);\n  });\n\n  buttonsDiv.append(cancelButton, deleteButton);\n  form.append(message, buttonsDiv);\n\n  return form;\n}\n\nexport { DeleteTodoForm };\n"],"names":["toDate","argument","argStr","Object","prototype","toString","call","Date","constructor","NaN","isEqual","leftDate","rightDate","isAfter","date","dateToCompare","_date","_dateToCompare","getTime","constructFrom","value","Math","pow","millisecondsInWeek","millisecondsInDay","millisecondsInHour","minutesInMonth","minutesInDay","addHours","amount","addMilliseconds","createElement","tagName","className","textContent","_len","arguments","length","attrs","Array","_key","TypeError","element","document","isArray","flat","i","setAttribute","eventRegistry","TodoListEvents","CREATE_NEW_TODO","NEW_TODO_CREATED","EDIT_TODO","TODO_EDITED","DELETE_TODO","CANCEL_DELETE_TODO","CONFIRM_DELETE_TODO","add","eventName","callbacks","forEach","callback","push","remove","handler","includes","splice","emit","data","freeze","Button","props","type","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","options","width","String","defaultWidth","formats","formatLong","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","array","predicate","test","findIndex","object","hasOwnProperty","findKey","valueCallback","rest","slice","enUS","code","formatDistance","token","count","result","tokenValue","replace","addSuffix","comparison","formatRelative","_baseDate","_options","localize","ordinalNumber","dirtyNumber","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseInt","parseResult","any","index","weekStartsOn","firstWeekContainsDate","defaultOptions","getDefaultOptions","startOfDay","setHours","getTimezoneOffsetInMilliseconds","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","getDayOfYear","dateLeft","dateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","differenceInCalendarDays","cleanDate","setFullYear","startOfYear","startOfWeek","locale","getDay","diff","setDate","startOfISOWeek","getISOWeekYear","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getISOWeek","fourthOfJanuary","startOfISOWeekYear","getWeekYear","firstWeekOfNextYear","firstWeekOfThisYear","getWeek","firstWeek","startOfWeekYear","addLeadingZeros","targetLength","abs","padStart","lightFormatters","y","signedYear","M","d","a","dayPeriodEnumValue","toUpperCase","h","H","m","s","S","numberOfDigits","milliseconds","trunc","formatters","G","unit","Y","signedWeekYear","weekYear","R","u","Q","ceil","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","e","localDayOfWeek","c","isoDayOfWeek","toLowerCase","b","hours","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","delimiter","sign","absOffset","minutes","dateLongFormatter","pattern","timeLongFormatter","longFormatters","p","P","datePattern","timePattern","dateTimeFormat","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isDate","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","format","formatStr","originalDate","isNaN","isValid","RangeError","parts","map","substring","firstCharacter","longFormatter","join","isToken","cleanEscapedString","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","isProtectedWeekYearToken","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","input","_message","subject","message","console","warn","warnOrThrowProtectedError","formatter","matched","TodoForm","todoInfo","currentDateTime","formatDate","defaultDateTime","dueDate","DESC_MAX_CHARS","todoForm","titleDiv","titleLabel","titleCharLimitSpan","titleTypedCharsSpan","titleCharLimitSepSpan","titleRemainCharsSpan","titleInput","title","append","addEventListener","descriptionDiv","descriptionLabel","descCharLimitSpan","descTypedCharsSpan","descCharLimitSepSpan","descRemainCharsSpan","descriptionText","description","dueDateDiv","dueDateLabel","dueDateInput","priorityFieldset","priorityLegend","highPriorityDiv","highPriorityLabel","highPriorityRadio","mediumPriorityDiv","mediumPriorityLabel","mediumPriorityRadio","lowPriorityDiv","lowPriorityLabel","lowPriorityRadio","priority","checked","submitDiv","submitButton","appendChild","event","preventDefault","form","target","setCustomValidity","newTodoInfo","assign","compareAsc","_dateLeft","_dateRight","isLastDayOfMonth","endOfDay","endOfMonth","differenceInMonths","difference","differenceInCalendarMonths","setMonth","isLastMonthNotFull","differenceInSeconds","differenceInMilliseconds","method","roundingMethod","formatDistanceToNow","baseDate","localizeOptions","seconds","offsetInSeconds","months","includeSeconds","days","nearestMonth","monthsSinceStartOfYear","years","now","isSameDay","isTomorrow","addDays","TodoCard","hideControllers","overdue","dueDateText","isToday","todoCard","text","strText","strAfterFirst","charAt","toLocaleUpperCase","capitalize","editButton","deleteButton","id","STORAGE_KEY_NAME","generateId","random","todoInfoList","todoSamples","formPresented","todoToEdit","todoToDelete","header","main","newTodoButton","removeTodoForm","showTodoForm","choices","opened","currentChoiceIndex","dropDownMenu","currentChoice","choicesMenu","choicesElements","choice","parentElement","children","sibling","classList","toggle","log","click","focus","lastChild","firstChild","nextSibling","previousSibling","DropDownMenu","sort","todoId","Error","emptyMain","buttonsDiv","cancelButton","DeleteTodoForm","showDeleteTodoForm","indexOf","localStorage","storedTodoInfoList","getItem","JSON","parse","showTodos","defaultView","setItem","stringify","node","removeChild","body","offsetHeight"],"sourceRoot":""}