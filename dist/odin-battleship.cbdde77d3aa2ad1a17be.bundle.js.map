{"version":3,"file":"odin-battleship.cbdde77d3aa2ad1a17be.bundle.js","mappings":"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","sources":["webpack://top-javascript-study/./odin-battleship/helpers/create-element.js","webpack://top-javascript-study/./odin-battleship/game-events/game-events.js","webpack://top-javascript-study/./odin-battleship/ship/ship.js","webpack://top-javascript-study/./odin-battleship/game-board/game-board.js","webpack://top-javascript-study/./odin-battleship/player/player.js","webpack://top-javascript-study/./odin-battleship/helpers/create-game.js","webpack://top-javascript-study/./odin-battleship/components/player-info/index.js","webpack://top-javascript-study/./odin-battleship/helpers/capitalize.js","webpack://top-javascript-study/./odin-battleship/components/board/index.js","webpack://top-javascript-study/./odin-battleship/index.js"],"sourcesContent":["/**\n * Creates HTMLElement of the given 'tagName' with any of the given\n * className, id or attributes\n * @param {string} tagName\n * @param {string?} className\n * @param {string?} textContent\n * @param {Array<string, string>?} attrs\n * - Any number of attributes (each of which as a key-value pair)\n * @returns {HTMLElement}\n */\nexport default function createElement(\n  tagName,\n  className,\n  textContent,\n  ...attrs\n) {\n  if (typeof tagName !== 'string') {\n    throw TypeError(\"Missing 'tagName' of type 'string'!\");\n  }\n  const element = document.createElement(tagName);\n  if (className) element.className = className;\n  if (textContent) element.textContent = textContent;\n  // Flatten attrs 1 level depth (in case attrs is in the form of an Array of paris)\n  if (\n    attrs.length === 1 &&\n    Array.isArray(attrs[0]) &&\n    Array.isArray(attrs[0][0])\n  ) {\n    attrs = attrs.flat(1);\n  }\n  if (attrs.length > 0) {\n    for (let i = 0; i < attrs.length; i++) {\n      if (\n        Array.isArray(attrs[i]) &&\n        attrs[i].length === 2 &&\n        attrs[i][0] &&\n        typeof attrs[i][0] === 'string'\n      ) {\n        if (attrs[i][1] || attrs[i][1] === 0 || attrs[i][1] === '') {\n          element.setAttribute(attrs[i][0], attrs[i][1]);\n        }\n      } else {\n        throw TypeError(\n          \"A given attribute in '...attrs' must be in the form of [string, string]\",\n        );\n      }\n    }\n  }\n  return element;\n}\n\nexport { createElement };\n","const REGISTRY = {};\n\n/**\n * Adds the given callback/s to registered callbacks on the given event (eventName).\n * @param {string} eventName\n * @param  {...function} callbacks\n */\nfunction add(eventName, ...callbacks) {\n  if (\n    typeof eventName !== 'string' ||\n    !callbacks.every((c) => typeof c === 'function')\n  ) {\n    const strArgs = `${eventName}${callbacks.length > 0 ? ', ' + callbacks.toString().replace(/(?:\\[|\\])/, '') : ''}`;\n    throw TypeError(\n      `Expect event name of type 'string' and at least 1 callback! Given: '${strArgs}'`,\n    );\n  }\n\n  if (REGISTRY[eventName]) {\n    REGISTRY[eventName].push(...callbacks);\n  } else {\n    REGISTRY[eventName] = callbacks;\n  }\n}\nObject.freeze(add);\nObject.freeze(add.prototype);\n\n/**\n * Removes the given callback from the registered callbacks on the given event (eventName).\n *\n * NOTE: The given callback MUST be the same reference that you had gavin to 'add' in order to be removed.\n * @param {string} eventName\n * @param {function} callback\n */\nfunction remove(eventName, callback) {\n  if (typeof eventName !== 'string' || typeof callback !== 'function') {\n    throw TypeError(\n      `Expect (eventName: string) & (callback: function)! Given: '${eventName}, ${callback}'`,\n    );\n  }\n\n  if (REGISTRY[eventName]) {\n    REGISTRY[eventName] = REGISTRY[eventName].filter(\n      (registeredCallback) => registeredCallback !== callback,\n    );\n  }\n}\nObject.freeze(remove);\nObject.freeze(remove.prototype);\n\n/**\n * Emits the given event (eventName); All registered callbacks on that event gets called.\n * @param {string} eventName\n * @param  {...any} args\n */\nfunction emit(eventName, ...args) {\n  if (typeof eventName !== 'string') {\n    throw TypeError(\n      `Expect at least 1 argument of type 'string'! Given: '${eventName}'`,\n    );\n  }\n\n  if (REGISTRY[eventName]) {\n    REGISTRY[eventName].forEach((callback) => {\n      callback(...args);\n    });\n  }\n}\nObject.freeze(emit);\nObject.freeze(emit.prototype);\n\nconst gameEvents = {\n  ATTACK: 'Fire',\n  HIT: 'Boom',\n  MISS: 'Oops',\n  LOSS: 'Meh',\n  GAME_OVER: 'Bye',\n  SHIP_MOVED: 'voo',\n  add,\n  remove,\n  emit,\n};\nObject.freeze(gameEvents);\n\nexport default gameEvents;\nexport { gameEvents };\n","export default function Ship(length) {\n  if (!Number.isInteger(length) || length < 2 || length > 5) {\n    throw TypeError(\n      `Expect 1 argument (length) of type 'number'; 1 < length < 6! given '${length}'`,\n    );\n  }\n\n  // Ship's state & logic\n  let hits = 0,\n    sunk = false;\n  const hit = () => {\n    if (!sunk) {\n      hits++;\n      sunk = hits >= length;\n    }\n  };\n  const isSunk = () => sunk;\n\n  // Create Ship object with its members to be recorded (just for autocompletion) before making them non-writable\n  const ship = {\n    length,\n    hits,\n    hit,\n    isSunk,\n  };\n\n  // Set the prototype of ship object to Ship.prototype\n  Object.setPrototypeOf(ship, Ship.prototype);\n\n  // Reconfigure all Ship's members and make them non-writable\n  const config = { configurable: false, enumerable: true };\n  const configExt = { ...config, writable: false };\n  Object.defineProperties(ship, {\n    // Set the constructor of a ship object to Ship\n    constructor: {\n      ...configExt,\n      enumerable: false,\n      value: Ship,\n    },\n    length: {\n      ...config,\n      get() {\n        return length;\n      },\n    },\n    hits: {\n      ...config,\n      get() {\n        return hits;\n      },\n    },\n    hit: {\n      ...configExt,\n      value: hit,\n    },\n    isSunk: {\n      ...configExt,\n      value: isSunk,\n    },\n  });\n\n  return ship;\n}\n\nexport { Ship };\n","import { gameEvents } from '../game-events';\nimport { Ship } from '../ship';\n\n// Save the custom board setup in order to reach out its values between UI renders\nconst oldBoardSetup = [];\nconst oldShips = [];\n\n/**\n * Creates the battleship's player's logical game board\n * @param {boolean} computerBoard - If true, always returns randomized board\n * @returns @type {Object}\n */\nexport default function GameBoard(computerBoard) {\n  const BOARD_SIDE_LENGTH = 10;\n\n  // Create the board & Fill it with cell objects\n  const board = [];\n  for (let i = 0; i < BOARD_SIDE_LENGTH; i++) {\n    board[i] = [];\n    for (let j = 0; j < BOARD_SIDE_LENGTH; j++) {\n      board[i][j] = {\n        ship: null,\n        attacked: false,\n        missed: false,\n      };\n    }\n  }\n\n  const shipsAreas = [];\n\n  // Define a private helper that takes 'n' to generate random number 'r': 0 < r < n\n  const getRandomUpToButNotIncluding = (n) => Math.floor(Math.random() * n);\n\n  // Define a private helper to check whether a cell on board is empty\n  const isEmptyCell = ([i, j]) => board[i][j].ship === null;\n\n  // Define a private helper to create a list of empty cells that constitutes a valid ship area\n  const getValidShipArea = (ship, firstCellPlace, direction) => {\n    const result = [];\n    const currentCellPlace = firstCellPlace;\n    for (let i = 0; i < ship.length; i++) {\n      if (!isEmptyCell(currentCellPlace)) {\n        return [];\n      }\n      // Push a copy of it on the 'result' array (ship area)\n      result.push([...currentCellPlace]);\n      // Move forward the current cell's place in the given direction\n      currentCellPlace[direction]++;\n      /* NOTE: I am PUSHING a COPY of the 'currentCellPlace', because I am MUTATING its values when I MOVE it */\n    }\n    return result;\n  };\n\n  // Create a flag indicates to a randomization fail (IN CASE OF LONG/INFINITE LOOP)\n  let randomizationFailed = false;\n\n  // Define a private helper to insert a given ship into a random place in the board\n  const insertShipInRandomBoardPlace = (ship) => {\n    let shipArea = []; // Placeholder for cells' places of the ship\n    let loopsCount = 0;\n    while (shipArea.length === 0 && loopsCount < 100) {\n      loopsCount++;\n      // Choose a random direction\n      const movingAxis = getRandomUpToButNotIncluding(2);\n      const fixedAxis = movingAxis === 0 ? 1 : 0;\n      // Choose random cell place for the first cell\n      const randomCellPlace = Array(2);\n      // Get random number 'r' for moving axis, r: 0 > r > (board-side's length - ship's length)\n      randomCellPlace[movingAxis] = getRandomUpToButNotIncluding(\n        BOARD_SIDE_LENGTH - ship.length,\n      );\n      // Get random number 'r' for fixed axis, r: 0 > r > (board-side's length)\n      randomCellPlace[fixedAxis] =\n        getRandomUpToButNotIncluding(BOARD_SIDE_LENGTH);\n      shipArea = getValidShipArea(ship, randomCellPlace, movingAxis);\n    }\n    randomizationFailed = loopsCount >= 100;\n    shipArea.forEach(([i, j]) => {\n      board[i][j].ship = ship;\n    });\n    // Save ship's area\n    shipsAreas.push([...shipArea]);\n  };\n\n  // Insert the ships in random places\n  const ships = [Ship(2), Ship(3), Ship(3), Ship(4), Ship(5)];\n  // If there is an old board setup use it otherwise, setup the new board\n  if (\n    !computerBoard &&\n    Array.isArray(oldBoardSetup) &&\n    oldBoardSetup.length === BOARD_SIDE_LENGTH\n  ) {\n    // Setup the board as it was\n    ships.splice(0, ships.length, ...oldShips);\n    board.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        cell.ship = oldBoardSetup[i][j].ship;\n        if (cell.ship) {\n          const shipIndex = ships.findIndex((ship) => ship === cell.ship);\n          if (!Array.isArray(shipsAreas[shipIndex])) {\n            shipsAreas[shipIndex] = [];\n          }\n          shipsAreas[shipIndex].push([i, j]);\n        }\n      });\n    });\n    // Reset the ships' state\n    shipsAreas.forEach((shipArea, shipIndex) => {\n      const oldShip = board[shipArea[0][0]][shipArea[0][1]].ship;\n      const newShip = Ship(oldShip.length);\n      ships[shipIndex] = newShip;\n      shipArea.forEach(([i, j]) => {\n        board[i][j].ship = ships[shipIndex];\n      });\n    });\n  } else {\n    do {\n      ships.forEach(insertShipInRandomBoardPlace);\n    } while (randomizationFailed);\n  }\n\n  // Define receiveAttack function\n  const receiveAttack = ([i, j]) => {\n    const lastI = BOARD_SIDE_LENGTH - 1;\n    const lastJ = BOARD_SIDE_LENGTH - 1;\n    if (i < 0 || j < 0 || i > lastI || j > lastJ) {\n      throw TypeError(\n        `Invalid coordinates! It should be in the range from '[0, 0]' to '[${lastI}, ${lastJ}]', the given is '[${j}, ${j}]'.`,\n      );\n    }\n    const cell = board[i][j];\n    if (cell.ship && !cell.attacked) {\n      cell.ship.hit();\n      cell.attacked = true;\n      gameEvents.emit(gameEvents.HIT, [i, j]);\n    } else if (!cell.ship && !cell.missed) {\n      cell.missed = true;\n      gameEvents.emit(gameEvents.MISS, [i, j]);\n    }\n    if (ships.every((ship) => ship.isSunk())) {\n      gameEvents.emit(gameEvents.LOSS);\n    }\n  };\n\n  const moveShip = (shipIndex, modifier) => {\n    if (shipIndex >= shipsAreas.length) {\n      throw TypeError(\n        `Invalid ship index! Ships count = ${shipsAreas.length}. Given index = ${shipIndex}.`,\n      );\n    }\n    // Make sure that the new area is valid before moving to it\n    const areaToOccupy = [];\n    const usedShipArea = shipsAreas[shipIndex];\n    const otherShipsAreas = shipsAreas.filter((_, i) => i !== shipIndex);\n    for (let i = 0; i < usedShipArea.length; i++) {\n      const oldOccupiedCell = usedShipArea[i];\n      const cellToOccupy = [\n        oldOccupiedCell[0] + modifier[0],\n        oldOccupiedCell[1] + modifier[1],\n      ];\n      if (\n        cellToOccupy.some((x) => x < 0) ||\n        cellToOccupy.some((x) => x >= BOARD_SIDE_LENGTH) ||\n        otherShipsAreas.some((shipArea) =>\n          shipArea.some((cell) => `${cell}` === `${cellToOccupy}`),\n        )\n      )\n        return false;\n      areaToOccupy.push(cellToOccupy);\n    }\n    // Empty the ship's old area\n    usedShipArea.forEach(([i, j]) => {\n      const cell = board[i][j];\n      cell.ship = null;\n    });\n    // Fill the ship's new area\n    shipsAreas[shipIndex] = areaToOccupy;\n    shipsAreas[shipIndex].forEach(([i, j]) => {\n      const cell = board[i][j];\n      cell.ship = ships[shipIndex];\n    });\n    // Reset the state of the board\n    board.forEach((cell) => {\n      cell.attacked = false;\n      cell.missed = false;\n    });\n    gameEvents.emit(gameEvents.SHIP_MOVED);\n    // Save current customized board\n    for (let i = 0; i < BOARD_SIDE_LENGTH; i++) {\n      oldBoardSetup[i] = [];\n      for (let j = 0; j < BOARD_SIDE_LENGTH; j++) {\n        oldBoardSetup[i][j] = {\n          ship: board[i][j].ship,\n          attacked: board[i][j].attacked,\n          missed: board[i][j].missed,\n        };\n      }\n    }\n    // Save the currently used set of ships\n    oldShips.splice(0, oldShips.length, ...ships);\n    return true;\n  };\n\n  // Create gameBoard object\n  const gameBoard = {\n    board,\n    ships,\n    shipsAreas,\n    receiveAttack,\n    moveShipUp(shipIndex) {\n      return moveShip(shipIndex, [-1, 0]);\n    },\n    moveShipDown(shipIndex) {\n      return moveShip(shipIndex, [1, 0]);\n    },\n    moveShipLeft(shipIndex) {\n      return moveShip(shipIndex, [0, -1]);\n    },\n    moveShipRight(shipIndex) {\n      return moveShip(shipIndex, [0, 1]);\n    },\n  };\n\n  // Make a gameBoard object an instance of GameBoard\n  Object.setPrototypeOf(gameBoard, GameBoard.prototype);\n  Object.defineProperty(gameBoard, 'constructor', {\n    value: GameBoard,\n    writable: false,\n    configurable: false,\n    enumerable: false,\n  });\n\n  // Make a gameBoard object immutable\n  Object.freeze(gameBoard);\n\n  return gameBoard;\n}\n\nexport { GameBoard };\n","import { gameEvents } from '../game-events';\nimport { GameBoard } from '../game-board';\n\n/**\n * A factory creates player object. A call without argument creates player of type 'computer'.\n * @param {string?} type - The type of the returned player ['computer' | 'human']\n * @returns {Player}\n */\nexport default function Player(playerType) {\n  // Assert that the given type is valid type or it is 'undefined', Otherwise, throw error\n  if (\n    playerType !== undefined &&\n    playerType !== Player.TYPES.COMPUTER &&\n    playerType !== Player.TYPES.HUMAN\n  ) {\n    throw TypeError(\n      `Invalid type! Only '${Player.TYPES.COMPUTER}' & '${Player.TYPES.HUMAN}' are the valid types. Given: '${playerType}'`,\n    );\n  }\n\n  const type = playerType === undefined ? Player.TYPES.COMPUTER : playerType;\n  const gameBoard = GameBoard(type === Player.TYPES.COMPUTER);\n\n  const player = {\n    type,\n    gameBoard,\n  };\n\n  // Add play method to player type 'computer'\n  if (player.type === Player.TYPES.COMPUTER) {\n    const maxHeight = player.gameBoard.board.length;\n    const maxWidth = player.gameBoard.board[0]?.length ?? 0;\n    // Save the targeted cell\n    let target = null;\n    // Save all valid targets\n    const validTargetsPairs = [];\n    for (let i = 0; i < maxHeight; i++) {\n      for (let j = 0; j < maxWidth; j++) {\n        validTargetsPairs.push([i, j]);\n      }\n    }\n    // Create a variable to hold our direction\n    // If it was a successful direction, then we keep moving in that direction\n    // Otherwise, reset the direction to null again\n    let previousDirection = null;\n    // Create a variable to hold a smart target instead of a random one\n    // The smart target is any adjacent cell and could be in a successful direction\n    let smartTarget = null;\n    // Create a helper checks whether a given cell is valid target\n    const isValidTarget = (cellPair) => {\n      return (\n        cellPair[0] >= 0 &&\n        cellPair[1] >= 0 &&\n        cellPair[0] < maxHeight &&\n        cellPair[1] < maxWidth &&\n        validTargetsPairs.some(\n          ([i, j]) => i === cellPair[0] && j === cellPair[1],\n        )\n      );\n    };\n    // Create a helper that gets all possible cells to attack (based on the last attacked cell)\n    const setSmartTarget = () => {\n      const DIRECTIONS = [\n        [-1, 0],\n        [0, 1],\n        [1, 0],\n        [0, -1],\n      ];\n      // Separate the direction index from the cell, because we need to keep track the direction itself to follow again\n      const validAdjacentCellsOrNulls = [];\n      // Save the indexes of the valid directions\n      const validAdjacentCellsIndexes = [];\n      DIRECTIONS.forEach((dirMod, i) => {\n        const adjacentCellPair = [target[0] + dirMod[0], target[1] + dirMod[1]];\n        if (isValidTarget(adjacentCellPair)) {\n          validAdjacentCellsOrNulls.push(adjacentCellPair);\n          validAdjacentCellsIndexes.push(i);\n        } else {\n          validAdjacentCellsOrNulls.push(null);\n        }\n      });\n      if (validAdjacentCellsIndexes.length > 0) {\n        // If the previous direction is null or lead to valid adjacent cell,\n        // then set it to lead to a valid adjacent cell\n        if (\n          previousDirection === null ||\n          !validAdjacentCellsIndexes.includes(previousDirection)\n        ) {\n          previousDirection =\n            validAdjacentCellsIndexes[\n              Math.floor(Math.random() * validAdjacentCellsIndexes.length)\n            ];\n        }\n        // Follow the previous direction\n        smartTarget = validAdjacentCellsOrNulls[previousDirection];\n      } else {\n        // There is not valid adjacent cells\n        previousDirection = null;\n        smartTarget = null;\n      }\n    };\n    // Create a flag to distinguish our attacks\n    let attacked = false;\n    // Reset previousDirection to null on every MISS event\n    gameEvents.add(gameEvents.MISS, () => {\n      if (attacked) {\n        previousDirection = null;\n        attacked = false;\n      }\n    });\n    // Handle HIT events\n    gameEvents.add(gameEvents.HIT, () => {\n      if (attacked) {\n        setSmartTarget();\n        attacked = false;\n      }\n    });\n    player.play = () => {\n      if (validTargetsPairs.length > 0) {\n        if (smartTarget === null) {\n          const randomTargetIndex = Math.floor(\n            Math.random() * validTargetsPairs.length,\n          );\n          target = validTargetsPairs[randomTargetIndex];\n          validTargetsPairs.splice(randomTargetIndex, 1);\n        } else {\n          target = smartTarget;\n          smartTarget = null;\n          validTargetsPairs.splice(\n            validTargetsPairs.findIndex(\n              ([i, j]) => target[0] === i && target[1] === j,\n            ),\n            1,\n          );\n        }\n        attacked = true;\n        gameEvents.emit(gameEvents.ATTACK, target);\n      } else {\n        attacked = false;\n        gameEvents.emit(gameEvents.GAME_OVER);\n      }\n    };\n  }\n\n  // Make the player object an instance of 'Player'\n  Object.setPrototypeOf(player, Player.prototype);\n  // Set 'Player' as the constructor for the player object\n  Object.defineProperty(player, 'constructor', {\n    value: Player,\n    writable: false,\n    enumerable: false,\n    configurable: false,\n  });\n  Object.freeze(player);\n\n  return player;\n}\n\n// Add TYPES as a static property on 'Player'\nPlayer.TYPES = { COMPUTER: 'C', HUMAN: 'H' };\n\n// Freeze Player & its prototype\nObject.freeze(Player);\nObject.freeze(Player.prototype);\n\nexport { Player };\n","import { createElement } from './create-element';\nimport { gameEvents } from '../game-events';\nimport { PlayerInfo } from '../components/player-info';\nimport { Board } from '../components/board';\nimport { Player } from '../player';\n\n/**\n * Creates a game object to hold the state of the game\n * @returns @type {Object}\n */\nfunction createNewState() {\n  return {\n    playersData: [\n      {\n        name: 'user',\n        player: Player(Player.TYPES.HUMAN),\n        playerUI: createElement('div', 'first-player'),\n      },\n      {\n        name: 'computer',\n        player: Player(Player.TYPES.COMPUTER),\n        playerUI: createElement('div', 'second-player'),\n      },\n    ],\n    currentPlayerIndex: 0,\n    allPlayersDisabled: false,\n    gameStarted: false,\n    /**\n     * Switches the current player's index\n     */\n    switchCurrentPlayer() {\n      this.currentPlayerIndex = (this.currentPlayerIndex + 1) % 2;\n    },\n    /**\n     * Renders the player's info section in the player's UI\n     * @param {number} playerIndex\n     */\n    renderPlayerInfo(playerIndex) {\n      const playerData = this.playersData[playerIndex];\n      const oldChildren = [...playerData.playerUI.children];\n      oldChildren.forEach((child) => child.remove());\n      playerData.playerUI.append(\n        PlayerInfo(\n          playerData.name,\n          playerData.player.type,\n          this.gameStarted ? null : playerData.player.gameBoard,\n        ),\n      );\n      if (oldChildren.length > 1) {\n        playerData.playerUI.appendChild(oldChildren[1]);\n      }\n    },\n    /**\n     * Renders the player's board section in the player's UI\n     * @param {number} playerIndex\n     */\n    renderPlayerBoard(playerIndex) {\n      const playerData = this.playersData[playerIndex];\n      const currentPlayer = playerIndex === this.currentPlayerIndex;\n      const disabled =\n        (this.allPlayersDisabled || currentPlayer) && this.gameStarted;\n      const playerTypeComputer =\n        playerData.player.type === Player.TYPES.COMPUTER;\n      const clickable = playerTypeComputer && !currentPlayer && !disabled;\n      if ([...playerData.playerUI.children].length > 1) {\n        playerData.playerUI.removeChild(playerData.playerUI.lastChild);\n      }\n      playerData.playerUI.appendChild(\n        Board(\n          playerData.player.gameBoard,\n          playerData.player.type === Player.TYPES.COMPUTER,\n          disabled,\n          clickable,\n        ),\n      );\n    },\n    /**\n     * Renders the recent player's UI-information/board to the DOM\n     * @param {number} playerIndex\n     * @param {HTMLDivElement?} parentElement - Optional parent to append player's UI to it\n     */\n    renderPlayerUI(playerIndex, parentElement) {\n      const playerData = this.playersData[playerIndex];\n      [...playerData.playerUI.children].forEach((child) => child.remove());\n      this.renderPlayerInfo(playerIndex);\n      this.renderPlayerBoard(playerIndex);\n      if (parentElement) parentElement.append(playerData.playerUI);\n    },\n    /**\n     * Renders the recent ALL player's UIs-information/board to the DOM\n     * @param {HTMLDivElement} parentElement - Optional parent to append ALL player's UIs to it\n     */\n    renderAllPlayersUI(parentElement) {\n      for (let i = 0; i < this.playersData.length; i++) {\n        this.renderPlayerUI(i, parentElement);\n      }\n    },\n    /**\n     * Plays on a computer's turn\n     */\n    playIfComputerTurn() {\n      const currentPlayer = this.playersData[this.currentPlayerIndex].player;\n      if (currentPlayer.type === Player.TYPES.COMPUTER) {\n        setTimeout(() => {\n          currentPlayer.play();\n        }, 1000);\n      }\n    },\n    /**\n     * Checks whether the computer is the current player\n     */\n    isComputerCurrentPlayer() {\n      return (\n        this.playersData[this.currentPlayerIndex].player.type ===\n        Player.TYPES.COMPUTER\n      );\n    },\n  };\n}\n\nlet gameState = createNewState();\n\nlet evaluatingAttack = false;\n\n/** Handles ATTACK event */\nfunction attackHandler(cellPlacePair) {\n  if (!evaluatingAttack) {\n    evaluatingAttack = true;\n    const opponentIndex = gameState.currentPlayerIndex === 0 ? 1 : 0;\n    const opponentPlayer = gameState.playersData[opponentIndex].player;\n    opponentPlayer.gameBoard.receiveAttack(cellPlacePair);\n    evaluatingAttack = false;\n  }\n}\n\n/** Handles HIT event */\nfunction hitHandler() {\n  // Continue with the current player, but rerender the opponent's board\n  gameState.renderPlayerUI(gameState.currentPlayerIndex === 0 ? 1 : 0);\n  gameState.playIfComputerTurn();\n}\n\n/** Handles MISS event */\nfunction missHandler() {\n  gameState.switchCurrentPlayer();\n  gameState.renderAllPlayersUI();\n  gameState.playIfComputerTurn();\n}\n\n/** Handles LOSS event */\nfunction lossHandler() {\n  gameEvents.emit(gameEvents.GAME_OVER);\n}\n\n/** Handles SHIP_MOVED event */\nfunction shipMovedHandler() {\n  if (gameState.gameStarted) {\n    gameState.renderAllPlayersUI();\n  } else {\n    gameState.renderPlayerBoard(0);\n  }\n}\n\n/** Adds all game events' handlers */\nfunction addGameEventsHandlers() {\n  gameEvents.add(gameEvents.SHIP_MOVED, shipMovedHandler);\n  gameEvents.add(gameEvents.ATTACK, attackHandler);\n  gameEvents.add(gameEvents.HIT, hitHandler);\n  gameEvents.add(gameEvents.MISS, missHandler);\n  gameEvents.add(gameEvents.LOSS, lossHandler);\n}\n\n/** Removes all game events' handlers */\nfunction removeGameEventsHandlers() {\n  gameEvents.remove(gameEvents.SHIP_MOVED, shipMovedHandler);\n  gameEvents.remove(gameEvents.ATTACK, attackHandler);\n  gameEvents.remove(gameEvents.HIT, hitHandler);\n  gameEvents.remove(gameEvents.MISS, missHandler);\n  gameEvents.remove(gameEvents.LOSS, lossHandler);\n}\n\n/**\n * Creates a game object to hold the state of the game\n * @returns @type {BattleshipGame}\n */\nexport default function createGame(gameContainer) {\n  return {\n    gameContainer,\n    initiateNewGame() {\n      removeGameEventsHandlers();\n      gameState = createNewState();\n      addGameEventsHandlers();\n      [...this.gameContainer.children].forEach((child) => child.remove());\n      gameState.renderPlayerUI(0, this.gameContainer);\n    },\n    /**\n     * - Resets game's state/events.\n     * - Rerenders the game's UI after removing the old UI from the game's container.\n     */\n    startGame() {\n      gameState.gameStarted = true;\n      [...this.gameContainer.children].forEach((child) => child.remove());\n      gameState.renderAllPlayersUI(this.gameContainer);\n    },\n    /** Checks whether the current player is the computer (should be called on a player's loss) */\n    isComputerWon() {\n      return gameState.isComputerCurrentPlayer();\n    },\n    /** Renders disabled UI */\n    endCurrentGame() {\n      gameState.gameStarted = false;\n      gameState.allPlayersDisabled = true;\n      gameState.renderAllPlayersUI();\n    },\n  };\n}\n\nexport { createGame };\n","import './index.css';\n\nimport { createElement } from '../../helpers/create-element';\nimport { capitalize } from '../../helpers/capitalize';\nimport { Player } from '../../player';\n\n/**\n * Creates DOM element (div) that has the player's information\n * @param {string} name - The name of the player (hyphened not spaced)\n * @param {string} type - The type of the player\n * @param {Object} gameBoard - The player's game board\n * @returns {HTMLDivElement}\n */\nexport default function PlayerInfo(name, type, gameBoard) {\n  if (typeof name !== 'string') {\n    throw TypeError(\n      `Invalid 'name' type; expected: 'string', given: '${name}'`,\n    );\n  }\n\n  const playerInfo = createElement('div', `${name}-info`);\n\n  const nameIndicator = capitalize(name.replace('-', ' '));\n\n  const playerName = createElement('h3', 'player-name', `${nameIndicator}`);\n\n  playerInfo.append(playerName);\n\n  if (gameBoard && type === Player.TYPES.HUMAN) {\n    const shipNav = createElement('div', 'ship-nav');\n    const selectContainer = createElement('div', 'select-container');\n    const selectShip = createElement('select', 'select-ship', null, [\n      'name',\n      'select-ship',\n    ]);\n    gameBoard.shipsAreas.forEach((shipArea, i) => {\n      selectShip.appendChild(\n        createElement(\n          'option',\n          'ship-option',\n          ''.padStart(shipArea.length, '◼'),\n          ['value', i],\n        ),\n      );\n    });\n    const [moveUpBtn, moveDownBtn, moveLeftBtn, moveRightBtn] = [\n      createElement('button', 'move-up-btn', 'Up', ['type', 'button']),\n      createElement('button', 'move-down-btn', 'Down', ['type', 'button']),\n      createElement('button', 'move-left-btn', 'Left', ['type', 'button']),\n      createElement('button', 'move-right-btn', 'Right', ['type', 'button']),\n    ];\n    const moveHandler = (functionName) => {\n      if (selectShip.value) {\n        const shipAreaIndex = Number(selectShip.value);\n        if (Number.isInteger(shipAreaIndex)) {\n          gameBoard[functionName](shipAreaIndex);\n        }\n      }\n    };\n    moveUpBtn.addEventListener('click', () => moveHandler('moveShipUp'));\n    moveDownBtn.addEventListener('click', () => moveHandler('moveShipDown'));\n    moveLeftBtn.addEventListener('click', () => moveHandler('moveShipLeft'));\n    moveRightBtn.addEventListener('click', () => moveHandler('moveShipRight'));\n    selectContainer.addEventListener('pointerdown', () => {\n      selectContainer.classList.add('open');\n    });\n    document.body.addEventListener('pointerup', () => {\n      if (selectContainer.classList.contains('open')) {\n        selectContainer.classList.remove('open');\n      }\n    });\n    selectContainer.appendChild(selectShip);\n    shipNav.append(\n      selectContainer,\n      moveUpBtn,\n      moveDownBtn,\n      moveLeftBtn,\n      moveRightBtn,\n    );\n    playerInfo.appendChild(shipNav);\n  }\n\n  return playerInfo;\n}\n\nexport { PlayerInfo };\n","/**\n * Returns same string with the first character capitalized.\n * @param {string} text - Text to capitalize\n * @return {string} - Same string with first character capitalized\n */\nexport default function capitalize(text) {\n  const strText = String(text);\n  const strAfterFirst = strText.length > 1 ? strText.slice(1) : '';\n  return strText.charAt(0).toLocaleUpperCase() + strAfterFirst;\n}\n\nexport { capitalize };\n","import './index.css';\n\nimport { createElement } from '../../helpers/create-element';\nimport { GameBoard } from '../../game-board';\nimport { gameEvents } from '../../game-events';\n\n/**\n * Creates a player's board UI component\n * @param {GameBoard} playerGameBoard - An instance of 'GameBoard'\n * @param {boolean} hidden - Hidden player's ships indicator\n * @param {boolean} disabled - If true, the returned board' UI will look disabled\n * @param {boolean} clickable - If true, the returned board won't listen to 'click' events\n * @returns {HTMLDivElement}\n */\nexport default function Board(playerGameBoard, hidden, disabled, clickable) {\n  [playerGameBoard, hidden, disabled].forEach((arg) => {\n    if (arg === undefined) {\n      throw TypeError(\"'Board' is called with an invalid number of arguments!\");\n    }\n  });\n\n  if (!(playerGameBoard instanceof GameBoard)) {\n    throw TypeError(\n      `'Board' is called with invalid 'playerGameBoard'! Given '${playerGameBoard}'.`,\n    );\n  }\n\n  if (typeof hidden !== 'boolean' || typeof disabled !== 'boolean') {\n    throw TypeError(\n      `'Board' expects 'hidden' & 'disabled' of type 'boolean'! Given '${hidden} & ${disabled}'.`,\n    );\n  }\n\n  const board = createElement(\n    'div',\n    'board-container' + (disabled ? ' disabled' : ''),\n  );\n\n  let boardWidth = 0;\n\n  playerGameBoard.board.forEach((row, i) => {\n    boardWidth = row.length;\n    row.forEach((cell, j) => {\n      let className = 'board-cell';\n      if (cell.ship) {\n        if (!hidden) className += ' ship';\n        if (cell.ship.isSunk()) className += ' sunk';\n        else if (cell.attacked) className += ' attacked';\n      } else if (cell.missed) className += ' missed';\n      const boardCell = createElement('div', className);\n      if (clickable) {\n        boardCell.addEventListener('click', () => {\n          gameEvents.emit(gameEvents.ATTACK, [i, j]);\n        });\n      }\n      board.appendChild(boardCell);\n    });\n  });\n\n  // Grid styles\n  board.style.display = 'grid';\n  board.style.gridTemplateColumns = `repeat(${boardWidth}, 1fr)`;\n  board.style.gridTemplateRows = `repeat(${boardWidth}, auto)`;\n\n  return board;\n}\n\nexport { Board };\n","import './index.css';\n\nimport { createElement } from './helpers/create-element';\nimport { createGame } from './helpers/create-game';\nimport { gameEvents } from './game-events';\n\nconst [headContainer, header, startGameBtn, resetGameBtn, gameContainer] = [\n  createElement('div', 'head-container'),\n  createElement('h1', 'head', 'Odin Battleship'),\n  createElement('button', 'start-btn control-btn', 'Start', ['type', 'button']),\n  createElement('button', 'reset-btn control-btn', 'Reset', ['type', 'button']),\n  createElement('div', 'game-container'),\n];\n\n// Initiate a game logic object\nconst game = createGame(gameContainer);\n\nlet gameOver = false;\n\nstartGameBtn.addEventListener('click', () => {\n  game.startGame();\n  headContainer.removeChild(startGameBtn);\n  headContainer.appendChild(resetGameBtn);\n});\n\nresetGameBtn.addEventListener('click', () => {\n  game.initiateNewGame();\n  headContainer.removeChild(resetGameBtn);\n  headContainer.appendChild(startGameBtn);\n  gameOver = false;\n});\n\ngameEvents.add(gameEvents.GAME_OVER, () => {\n  if (!gameOver) {\n    gameOver = true;\n    game.endCurrentGame();\n    const endMessage = game.isComputerWon() ? 'Game Over!' : 'You Win!';\n    const [dialog, message, question, cancelBtn, playAgainBtn] = [\n      createElement('dialog', 'game-over'),\n      createElement('h2', 'message', endMessage),\n      createElement('p', 'question', 'Do want to play again?'),\n      createElement('button', 'cancel-btn', 'Cancel', ['type', 'button']),\n      createElement('button', 'play-again-btn', 'Play Again', [\n        'type',\n        'button',\n      ]),\n    ];\n    dialog.addEventListener('close', () => document.body.removeChild(dialog));\n    cancelBtn.addEventListener('click', () => dialog.close());\n    playAgainBtn.addEventListener('click', () => {\n      game.initiateNewGame();\n      dialog.close();\n      resetGameBtn.click();\n    });\n    dialog.append(message, question, cancelBtn, playAgainBtn);\n    document.body.append(dialog);\n    dialog.showModal();\n  }\n});\n\ngame.initiateNewGame();\n\nheadContainer.append(header, startGameBtn);\ndocument.body.append(headContainer, gameContainer);\n"],"names":["createElement","tagName","className","textContent","_len","arguments","length","attrs","Array","_key","TypeError","element","document","isArray","flat","i","setAttribute","REGISTRY","add","eventName","callbacks","every","c","strArgs","concat","toString","replace","_REGISTRY$eventName","push","apply","remove","callback","filter","registeredCallback","emit","_len2","args","_key2","forEach","Object","freeze","prototype","gameEvents","ATTACK","HIT","MISS","LOSS","GAME_OVER","SHIP_MOVED","Ship","Number","isInteger","hits","sunk","hit","isSunk","ship","setPrototypeOf","config","configurable","enumerable","configExt","_objectSpread","writable","defineProperties","constructor","value","get","oldBoardSetup","oldShips","GameBoard","computerBoard","BOARD_SIDE_LENGTH","board","j","attacked","missed","shipsAreas","getRandomUpToButNotIncluding","n","Math","floor","random","isEmptyCell","_ref","_ref2","_slicedToArray","getValidShipArea","firstCellPlace","direction","result","currentCellPlace","_toConsumableArray","randomizationFailed","insertShipInRandomBoardPlace","shipArea","loopsCount","movingAxis","fixedAxis","randomCellPlace","_ref3","_ref4","ships","splice","row","cell","shipIndex","findIndex","newShip","_ref5","_ref6","moveShip","modifier","_ret","areaToOccupy","usedShipArea","otherShipsAreas","_","_loop","oldOccupiedCell","cellToOccupy","some","x","v","_ref9","_ref10","_ref11","_ref12","gameBoard","receiveAttack","_ref7","_ref8","moveShipUp","moveShipDown","moveShipLeft","moveShipRight","defineProperty","Player","playerType","undefined","TYPES","COMPUTER","HUMAN","type","player","_player$gameBoard$boa","_player$gameBoard$boa2","maxHeight","maxWidth","target","validTargetsPairs","previousDirection","smartTarget","validAdjacentCellsOrNulls","validAdjacentCellsIndexes","dirMod","cellPair","adjacentCellPair","includes","play","randomTargetIndex","createNewState","playersData","name","playerUI","currentPlayerIndex","allPlayersDisabled","gameStarted","switchCurrentPlayer","this","renderPlayerInfo","playerIndex","playerData","oldChildren","children","child","append","text","strText","strAfterFirst","playerInfo","nameIndicator","String","slice","charAt","toLocaleUpperCase","playerName","shipNav","selectContainer","selectShip","appendChild","padStart","moveUpBtn","moveDownBtn","moveLeftBtn","moveRightBtn","moveHandler","functionName","shipAreaIndex","addEventListener","classList","body","contains","PlayerInfo","renderPlayerBoard","currentPlayer","disabled","clickable","removeChild","lastChild","playerGameBoard","hidden","arg","boardWidth","boardCell","style","display","gridTemplateColumns","gridTemplateRows","Board","renderPlayerUI","parentElement","renderAllPlayersUI","playIfComputerTurn","setTimeout","isComputerCurrentPlayer","gameState","evaluatingAttack","attackHandler","cellPlacePair","opponentIndex","hitHandler","missHandler","lossHandler","shipMovedHandler","headContainer","header","startGameBtn","resetGameBtn","gameContainer","game","initiateNewGame","startGame","isComputerWon","endCurrentGame","createGame","gameOver","endMessage","dialog","message","question","cancelBtn","playAgainBtn","close","click","showModal"],"sourceRoot":""}