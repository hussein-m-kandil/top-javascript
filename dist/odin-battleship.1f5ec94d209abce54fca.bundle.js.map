{"version":3,"file":"odin-battleship.1f5ec94d209abce54fca.bundle.js","mappings":"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","sources":["webpack://top-javascript-study/./odin-battleship/helpers/createElement.js","webpack://top-javascript-study/./odin-battleship/components/player-info/index.js","webpack://top-javascript-study/./odin-battleship/helpers/capitalize.js","webpack://top-javascript-study/./odin-battleship/ship/ship.js","webpack://top-javascript-study/./odin-battleship/game-board/game-board.js","webpack://top-javascript-study/./odin-battleship/helpers/createGameBoardMatrix.js","webpack://top-javascript-study/./odin-battleship/player/player.js","webpack://top-javascript-study/./odin-battleship/index.js"],"sourcesContent":["/**\n * Creates HTMLElement of the given 'tagName' with any of the given\n * className, id or attributes\n * @param {string} tagName\n * @param {string?} className\n * @param {string?} textContent\n * @param {Array<string, string>?} attrs\n * - Any number of attributes (each of which as a key-value pair)\n * @returns {HTMLElement}\n */\nexport default function createElement(\n  tagName,\n  className,\n  textContent,\n  ...attrs\n) {\n  if (typeof tagName !== 'string') {\n    throw TypeError(\"Missing 'tagName' of type 'string'!\");\n  }\n  const element = document.createElement(tagName);\n  if (className) element.className = className;\n  if (textContent) element.textContent = textContent;\n  // Flatten attrs 1 level depth (in case attrs is in the form of an Array of paris)\n  if (\n    attrs.length === 1 &&\n    Array.isArray(attrs[0]) &&\n    Array.isArray(attrs[0][0])\n  ) {\n    attrs = attrs.flat(1);\n  }\n  if (attrs.length > 0) {\n    for (let i = 0; i < attrs.length; i++) {\n      if (\n        Array.isArray(attrs[i]) &&\n        attrs[i].length === 2 &&\n        attrs[i][0] &&\n        typeof attrs[i][0] === 'string'\n      ) {\n        if (attrs[i][1] || attrs[i][1] === 0 || attrs[i][1] === '') {\n          element.setAttribute(attrs[i][0], attrs[i][1]);\n        }\n      } else {\n        throw TypeError(\n          \"A given attribute in '...attrs' must be in the form of [string, string]\",\n        );\n      }\n    }\n  }\n  return element;\n}\n\nexport { createElement };\n","import './index.css';\n\nimport { createElement } from '../../helpers/createElement';\nimport { capitalize } from '../../helpers/capitalize';\n\n/**\n * Creates DOM element (div) that has the player's information\n * @param {string} name - The name of the player (hyphened not spaced)\n * @returns {HTMLDivElement}\n */\nexport default function PlayerInfo(name) {\n  if (typeof name !== 'string') {\n    throw TypeError(\n      `Invalid 'name' type; expected: 'string', given: '${name}'`,\n    );\n  }\n\n  const playerInfo = createElement('div', `${name}-info`);\n\n  const playerName = createElement(\n    'h3',\n    'player-name',\n    capitalize(name.replace('-', ' ')),\n  );\n\n  const playerType = createElement(\n    'button',\n    'player-type',\n    'Player type is not implemented!', // TODO: ...\n    ['type', 'button'],\n  );\n\n  playerInfo.append(playerName, playerType);\n\n  return playerInfo;\n}\n\nexport { PlayerInfo };\n","/**\n * Returns same string with the first character capitalized.\n * @param {string} text - Text to capitalize\n * @return {string} - Same string with first character capitalized\n */\nexport default function capitalize(text) {\n  const strText = String(text);\n  const strAfterFirst = strText.length > 1 ? strText.slice(1) : '';\n  return strText.charAt(0).toLocaleUpperCase() + strAfterFirst;\n}\n\nexport { capitalize };\n","export default function Ship(length) {\n  if (!Number.isInteger(length) || length < 2 || length > 5) {\n    throw TypeError(\n      `Expect 1 argument (length) of type 'number'; 1 < length < 6! given '${length}'`,\n    );\n  }\n\n  // Ship's state & logic\n  let hits = 0,\n    sunk = false;\n  const hit = () => {\n    if (!sunk) {\n      hits++;\n      sunk = hits >= length;\n    }\n  };\n  const isSunk = () => sunk;\n\n  // Create Ship object with its members to be recorded (just for autocompletion) before making them non-writable\n  const ship = {\n    length,\n    hits,\n    hit,\n    isSunk,\n  };\n\n  // Set the prototype of ship object to Ship.prototype\n  Object.setPrototypeOf(ship, Ship.prototype);\n\n  // Reconfigure all Ship's members and make them non-writable\n  const config = { configurable: false, enumerable: true };\n  const configExt = { ...config, writable: false };\n  Object.defineProperties(ship, {\n    // Set the constructor of a ship object to Ship\n    constructor: {\n      ...configExt,\n      enumerable: false,\n      value: Ship,\n    },\n    length: {\n      ...config,\n      get() {\n        return length;\n      },\n    },\n    hits: {\n      ...config,\n      get() {\n        return hits;\n      },\n    },\n    hit: {\n      ...configExt,\n      value: hit,\n    },\n    isSunk: {\n      ...configExt,\n      value: isSunk,\n    },\n  });\n\n  return ship;\n}\n\nexport { Ship };\n","import { createGameBoardMatrix } from '../helpers/createGameBoardMatrix.js';\nimport { Ship } from '../ship';\n\nexport default function GameBoard() {\n  const board = createGameBoardMatrix();\n\n  // Fill the board\n  board.forEach((row) =>\n    row.forEach((cell) => {\n      cell.ship = null;\n      cell.attacked = false;\n      cell.missed = false;\n    }),\n  );\n\n  // Define private helper that takes 'n' to generate random number 'r': 0 < r < n\n  const getRandomUpToButNotIncluding = (n) => Math.floor(Math.random() * n);\n\n  // Define private helper to check whether a cell on board is empty\n  const isEmptyCell = ([i, j]) => board[i][j].ship === null;\n\n  // Insert the ships in random places\n  const ships = [Ship(2), Ship(3), Ship(3), Ship(4), Ship(5)];\n\n  ships.forEach((ship) => {\n    // Choose a random direction\n    const varAxis = getRandomUpToButNotIncluding(2);\n    const shipArea = []; // Placeholder for cell's coordinates of the ship\n    while (shipArea.length === 0) {\n      // Choose random coordinates for the first cell\n      const coordinates = [\n        getRandomUpToButNotIncluding(board[0].length - ship.length),\n        getRandomUpToButNotIncluding(board.length - ship.length),\n      ];\n      for (let i = 0; i < ship.length; i++) {\n        // If the current coordinates' cell is not empty, reset 'shipArea' so the while loop repeats from the start\n        if (!isEmptyCell(coordinates)) {\n          shipArea.splice(0);\n          break;\n        }\n        // Otherwise, mutate (increment just the axis of our direction) the same reference ('coordinates'),\n        // after passing a copy of its current values to 'shipArea'\n        shipArea.push([...coordinates]);\n        coordinates[varAxis]++;\n        // If you pass 'coordinates' directly to 'shipArea',\n        // you will end with 'shipArea' contains pointers points to the same value on memory (which you have mutate it)\n      }\n    }\n    shipArea.forEach(([i, j]) => {\n      board[i][j].ship = ship;\n    });\n  });\n\n  // Define receiveAttack function\n  const receiveAttack = ([i, j]) => {\n    const lastI = board.length - 1;\n    const lastJ = board[0].length - 1;\n    if (i < 0 || j < 0 || i > lastI || j > lastJ) {\n      throw TypeError(\n        `Invalid coordinates! It should be in the range from '[0, 0]' to '[${lastI}, ${lastJ}]', the given is '[${j}, ${j}]'.`,\n      );\n    }\n    const cell = board[i][j];\n    if (cell.ship && !cell.attacked) {\n      cell.ship.hit();\n      cell.attacked = true;\n      // TODO: Announce successful attack\n    } else if (!cell.ship && !cell.missed) {\n      cell.missed = true;\n      // TODO: Announce failed attack\n    }\n    if (ships.every((ship) => ship.isSunk())) {\n      // TODO: Announce overed game\n    }\n  };\n\n  // Create gameBoard object\n  const gameBoard = {\n    ships,\n    board,\n    receiveAttack,\n  };\n\n  // Make a gameBoard object an instance of GameBoard\n  Object.setPrototypeOf(gameBoard, GameBoard.prototype);\n  Object.defineProperty(gameBoard, 'constructor', {\n    value: GameBoard,\n    writable: false,\n    configurable: false,\n    enumerable: false,\n  });\n\n  // Make a gameBoard object immutable\n  Object.freeze(gameBoard);\n\n  return gameBoard;\n}\n\nexport { GameBoard };\n","/**\n * Creates a 2D Array of empty objects\n * @returns {Object[][]}\n */\nexport default function createGameBoardMatrix() {\n  const boardMatrix = [];\n\n  for (let i = 0; i < 10; i++) {\n    boardMatrix[i] = [];\n    for (let j = 0; j < 10; j++) {\n      boardMatrix[i][j] = {};\n    }\n  }\n\n  return boardMatrix;\n}\n\nexport { createGameBoardMatrix };\n","import { GameBoard } from '../game-board';\n\n/**\n * A factory creates player object. A call without argument creates player of type 'computer'.\n * @param {string?} type - The type of the returned player ['computer' | 'human']\n * @returns {Player}\n */\nexport default function Player(type) {\n  const TYPES = ['computer', 'human'];\n\n  // If not given a 'type', default to 'computer',\n  if (type === undefined) {\n    type = TYPES[0];\n  } else {\n    // Otherwise, check the given after converting it to lowercase string\n    type = String(type.toLowerCase());\n    if (!TYPES.includes(type)) {\n      throw TypeError(\n        `Invalid type! Only '${TYPES[0]}' & '${TYPES[1]}' are the valid types. Given: '${type}'`,\n      );\n    }\n  }\n\n  // Add TYPES as a static property on 'Player'\n  Player.TYPES = TYPES;\n\n  const player = { type, gameBoard: GameBoard() };\n\n  // Make the player object an instance of 'Player'\n  Object.setPrototypeOf(player, Player.prototype);\n  // Set 'Player' as the constructor for the player object\n  Object.defineProperty(player, 'constructor', {\n    value: Player,\n    writable: false,\n    enumerable: false,\n    configurable: false,\n  });\n  Object.freeze(player);\n\n  return player;\n}\n\nexport { Player };\n","import './index.css';\n\nimport { createElement } from './helpers/createElement';\nimport { PlayerInfo } from './components/player-info';\nimport { Player } from './player';\n\n// Create game players\nconst players = [\n  { player: Player('human'), info: PlayerInfo('player-one') },\n  {\n    player: Player('computer'),\n    info: PlayerInfo('player-two'),\n  },\n];\n\n// Header\nconst head = createElement('h1', 'head', 'Odin BattleShip');\n\n// Players information\nconst playersInfo = createElement('div', 'players-info');\nplayersInfo.append(players[0].info, players[1].info);\n\n// Append the components to the DOM\ndocument.body.append(head, playersInfo);\n"],"names":["createElement","tagName","className","textContent","_len","arguments","length","attrs","Array","_key","TypeError","element","document","isArray","flat","i","setAttribute","PlayerInfo","name","concat","text","strText","strAfterFirst","playerInfo","playerName","replace","String","slice","charAt","toLocaleUpperCase","playerType","append","Ship","Number","isInteger","hits","sunk","hit","isSunk","ship","Object","setPrototypeOf","prototype","config","configurable","enumerable","configExt","_objectSpread","writable","defineProperties","constructor","value","get","GameBoard","board","boardMatrix","j","createGameBoardMatrix","forEach","row","cell","attacked","missed","getRandomUpToButNotIncluding","n","Math","floor","random","isEmptyCell","_ref","_ref2","_slicedToArray","ships","varAxis","shipArea","coordinates","splice","push","_ref3","_ref4","gameBoard","receiveAttack","_ref5","_ref6","lastI","lastJ","every","defineProperty","freeze","Player","type","TYPES","undefined","toLowerCase","includes","player","players","info","head","playersInfo","body"],"sourceRoot":""}