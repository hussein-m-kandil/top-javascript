{"version":3,"file":"odin-weather-app.a46b66baa2fd8a45d12e.bundle.js","mappings":"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","sources":["webpack://top-javascript-study/./odin-weather-app/helpers/createElement.js","webpack://top-javascript-study/./odin-weather-app/helpers/showWeatherData.js","webpack://top-javascript-study/./odin-weather-app/components/CurrentWeather/index.js","webpack://top-javascript-study/./odin-weather-app/index.js","webpack://top-javascript-study/./odin-weather-app/components/LocationForm/index.js","webpack://top-javascript-study/./odin-weather-app/helpers/getWeatherData.js","webpack://top-javascript-study/./odin-weather-app/components/Toggler/index.js"],"sourcesContent":["/**\n * Creates HTMLElement of the given 'tagName' with any of the given\n * className, id or attributes\n * @param {string} tagName\n * @param {string?} className\n * @param {string?} textContent\n * @param {Array<string, string>?} attrs\n * - Any number of attributes (each of which as a key-value pair)\n * @returns {HTMLElement}\n */\nexport default function createElement(\n  tagName,\n  className,\n  textContent,\n  ...attrs\n) {\n  if (typeof tagName !== 'string') {\n    throw TypeError(\"Missing 'tagName' of type 'string'!\");\n  }\n  const element = document.createElement(tagName);\n  if (className) element.className = className;\n  if (textContent) element.textContent = textContent;\n  // Flatten attrs 1 level depth (in case attrs is in the form of an Array of paris)\n  if (\n    attrs.length === 1 &&\n    Array.isArray(attrs[0]) &&\n    Array.isArray(attrs[0][0])\n  ) {\n    attrs = attrs.flat(1);\n  }\n  if (attrs.length > 0) {\n    for (let i = 0; i < attrs.length; i++) {\n      if (\n        Array.isArray(attrs[i]) &&\n        attrs[i].length === 2 &&\n        attrs[i][0] &&\n        typeof attrs[i][0] === 'string'\n      ) {\n        if (attrs[i][1] || attrs[i][1] === 0 || attrs[i][1] === '') {\n          element.setAttribute(attrs[i][0], attrs[i][1]);\n        }\n      } else {\n        throw TypeError(\n          \"A given attribute in '...attrs' must be in the form of [string, string]\",\n        );\n      }\n    }\n  }\n  return element;\n}\n\nexport { createElement };\n","import CurrentWeather from '../components/CurrentWeather';\n\nexport default function showWeatherData(\n  containerClassName,\n  weatherData,\n  weatherUnit,\n) {\n  const contentDiv = document.querySelector(`.${containerClassName}`);\n  if (contentDiv) {\n    [...contentDiv.children].forEach((child) => child.remove());\n    contentDiv.append(CurrentWeather(weatherData, weatherUnit));\n  }\n}\n\nexport { showWeatherData };\n","import './index.css';\n\nimport createElement from '../../helpers/createElement';\n\nexport default function CurrentWeather(weatherData, weatherUnit) {\n  let unit, cTemp, feel, hTemp, lTemp;\n  const cond = weatherData.current.condition.text;\n  const humid = weatherData.current.humidity;\n\n  if (weatherUnit.toLowerCase() === 'celsius') {\n    unit = 'C';\n    feel = weatherData.current.feelslike_c;\n    cTemp = weatherData.current.temp_c;\n    hTemp = weatherData.forecast.forecastday[0].day.maxtemp_c;\n    lTemp = weatherData.forecast.forecastday[0].day.mintemp_c;\n  } else {\n    unit = 'F';\n    cTemp = weatherData.current.temp_f;\n    feel = weatherData.current.feelslike_f;\n    hTemp = weatherData.forecast.forecastday[0].day.maxtemp_f;\n    lTemp = weatherData.forecast.forecastday[0].day.mintemp_f;\n  }\n\n  const currentWeather = createElement('div', 'current-weather');\n  const condition = createElement('div', 'condition', `${cond}`);\n  const currentTemp = createElement('div', 'current-temp', `${cTemp} ${unit}`);\n  const humidity = createElement('div', 'humidity', `Humidity ${humid}%`);\n  const minMaxTemp = createElement('div', 'min-max-temp');\n\n  currentTemp.append(\n    createElement('span', 'feels-like', ` Feels like ${feel} ${unit}`),\n  );\n  minMaxTemp.append(\n    createElement('span', 'high-temp', `H ${hTemp} ${unit}`),\n    createElement('span', 'min-max-v-div', ' | '),\n    createElement('span', 'low-temp', `L ${lTemp} ${unit}`),\n  );\n  currentWeather.append(condition, currentTemp, humidity, minMaxTemp);\n\n  return currentWeather;\n}\n\nexport { CurrentWeather };\n","import './index.css';\n\nimport createElement from './helpers/createElement';\nimport getWeatherData from './helpers/getWeatherData';\nimport showWeatherData from './helpers/showWeatherData';\nimport LocationForm from './components/LocationForm';\nimport Toggler from './components/Toggler';\n\nconst WEATHER_CONTENT_CLASS = 'weather-content';\nconst WEATHER_UNITS = ['Celsius', 'Fahrenheit'];\nlet currentWeatherUnit = WEATHER_UNITS[0];\nlet currentWeatherData = null;\n\nconst appTitle = createElement('h1', 'app-title', 'Odin Weather App');\n\nconst locationForm = LocationForm((location) =>\n  getWeatherData(location)\n    .then((weatherData) => {\n      console.dir(weatherData);\n      currentWeatherData = weatherData;\n      showWeatherData(\n        WEATHER_CONTENT_CLASS,\n        currentWeatherData,\n        currentWeatherUnit,\n      );\n    })\n    .catch((error) =>\n      console.log(`${error.name} after 'getWeatherData': \\n\\t${error.message}`),\n    ),\n);\n\nconst toggler = Toggler(WEATHER_UNITS, ({ value }) => {\n  currentWeatherUnit = value;\n  if (currentWeatherData) {\n    showWeatherData(\n      WEATHER_CONTENT_CLASS,\n      currentWeatherData,\n      currentWeatherUnit,\n    );\n  }\n});\n\nconst weatherContent = createElement('div', WEATHER_CONTENT_CLASS);\n\nconst footer = createElement('footer', 'link-back');\nfooter.append(\n  document.createTextNode('Powered by '),\n  createElement(\n    'a',\n    'weather-api',\n    ' WeatherAPI.com',\n    ['href', 'https://www.weatherapi.com/'],\n    ['title', 'Weather API'],\n  ),\n);\n\ndocument.body.append(appTitle, locationForm, toggler, weatherContent, footer);\n","import './index.css';\n\nimport { createElement } from '../../helpers/createElement';\n\n/**\n * A Form to get the location for the user\n * @param {function} submitCallback - A function that accepts 'location': 'string'\n * @returns {HTMLFormElement}\n */\nexport default function LocationForm(submitCallback) {\n  const form = createElement('form', 'weather-location');\n  const input = createElement(\n    'input',\n    'location',\n    '',\n    ['type', 'text'],\n    ['name', 'location'],\n    ['placeholder', 'Location (e.g. \"Cairo\")'],\n    ['autocomplete', 'on'],\n    ['autofocus', ''],\n    // ['required', ''],\n  );\n  const button = createElement(\n    'button',\n    'location',\n    '',\n    ['type', 'submit'],\n    ['aria-label', 'Get weather'],\n  );\n  const span = createElement('span', 'ui-only', '🔍', ['aria-hidden', 'true']);\n  const errorDiv = createElement('div', 'error');\n\n  button.appendChild(span);\n  form.append(errorDiv, input, button);\n\n  form.addEventListener('submit', (event) => {\n    event.preventDefault();\n    form.classList.add('invalid');\n    const location = form['location'].value;\n    if (location) {\n      if (/^[\\w-\\s'\"]+$/.test(location)) {\n        errorDiv.textContent = '';\n        form.classList.remove('invalid');\n        submitCallback(location);\n      } else {\n        errorDiv.textContent = '* Invalid location name!';\n      }\n    } else {\n      errorDiv.textContent = '* Location is required!';\n    }\n  });\n\n  return form;\n}\n\nexport { LocationForm };\n","const BASE_URL = 'https://api.weatherapi.com/v1';\nconst FORECAST_API = '/forecast.json';\nconst SECO_SECO = '646f26dea5ab4974bc3120515240604';\n\nasync function fetchWeatherData(location) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}${FORECAST_API}?key=${SECO_SECO}&q=${location}`,\n      {\n        mode: 'cors',\n      },\n    );\n    if (response.ok) {\n      return await response.json();\n    }\n    throw Error('Fetched response in not ok!');\n  } catch (error) {\n    console.log(`${error.name} in 'getWeatherData': \\n\\t${error.message}`);\n  }\n  return null;\n}\n\nexport default function getWeatherData(location) {\n  return new Promise((resolve, reject) => {\n    fetchWeatherData(location).then((weatherData) => {\n      if (weatherData) {\n        resolve(weatherData);\n      } else {\n        reject(Error('There is no weather data!'));\n      }\n    });\n  });\n}\n\nexport { getWeatherData };\n","import './index.css';\n\nimport createElement from '../../helpers/createElement';\n\n/**\n * A button that toggles between values\n *\n * @param {string[]} values - An array of values to toggle between them\n * @param {function} toggleCallback - A function  to be called on toggle\n *\n * NOTE: 'toggleCallback' must accepts an object i.e. { index: number, value: string }\n * - index: the index of the current value in the values array.\n * - value: the current value of the button\n *\n * @returns {HTMLButtonElement} - The toggler\n */\nexport default function Toggler(values, toggleCallback) {\n  if (!toggleCallback)\n    throw Error(\"Missing argument: 'toggleCallback' type 'function'\");\n  if (!values) throw Error(\"Missing argument: 'values' type 'string[]'\");\n  if (!Array.isArray(values) || values.length < 1) {\n    throw TypeError(\n      \"Invalid argument: 'values' must be non-empty array of strings\",\n    );\n  }\n\n  let currentIndex = 0;\n\n  const toggler = createElement('button', 'toggler', values[currentIndex], [\n    'type',\n    'button',\n  ]);\n\n  toggler.addEventListener('click', () => {\n    currentIndex = (currentIndex + 1) % values.length;\n    toggler.textContent = values[currentIndex];\n    toggleCallback({\n      index: currentIndex,\n      value: values[currentIndex],\n    });\n  });\n\n  return toggler;\n}\n\nexport { Toggler };\n"],"names":["createElement","tagName","className","textContent","_len","arguments","length","attrs","Array","_key","TypeError","element","document","isArray","flat","i","setAttribute","showWeatherData","containerClassName","weatherData","weatherUnit","contentDiv","querySelector","children","forEach","child","remove","append","unit","cTemp","feel","hTemp","lTemp","cond","current","condition","text","humid","humidity","toLowerCase","feelslike_c","temp_c","forecast","forecastday","day","maxtemp_c","mintemp_c","temp_f","feelslike_f","maxtemp_f","mintemp_f","currentWeather","currentTemp","minMaxTemp","CurrentWeather","WEATHER_CONTENT_CLASS","WEATHER_UNITS","currentWeatherUnit","currentWeatherData","appTitle","locationForm","submitCallback","form","input","button","span","errorDiv","appendChild","addEventListener","event","preventDefault","classList","add","location","value","test","Promise","resolve","reject","async","response","fetch","mode","ok","json","Error","error","console","log","name","message","fetchWeatherData","then","getWeatherData","dir","catch","LocationForm","toggler","values","toggleCallback","currentIndex","index","Toggler","_ref","weatherContent","footer","createTextNode","body"],"sourceRoot":""}