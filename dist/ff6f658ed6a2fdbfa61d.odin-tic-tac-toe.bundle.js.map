{"version":3,"file":"ff6f658ed6a2fdbfa61d.odin-tic-tac-toe.bundle.js","mappings":"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","sources":["webpack://top-javascript-study/./odin-tic-tac-toe/assets/js/main.js"],"sourcesContent":["(function () {\n  const gameEvents = (function () {\n    // Game events' names\n    const START_EVENT_NAME = \"start\";\n    const STARTED_EVENT_NAME = \"started\";\n    const HARD_GAME_EVENT_NAME = \"hard\";\n    const MEDIUM_GAME_EVENT_NAME = \"medium\";\n    const EASY_GAME_EVENT_NAME = \"easy\";\n    const ONE_PLAYER_GAME_EVENT_NAME = \"oneplayergame\";\n    const WIN_EVENT_NAME = \"win\";\n    const TIE_EVENT_NAME = \"tie\";\n    const MARK_EVENT_NAME = \"mark\";\n    const MARKING_EVENT_NAME = \"marking\";\n    const MARKED_EVENT_NAME = \"marked\";\n    const RESET_EVENT_NAME = \"reset\";\n    const RESET_BOARD_EVENT_NAME = \"resetboard\";\n    const RESTART_EVENT_NAME = \"restart\";\n    const COMPUTER_TURN_EVENT_NAME = \"computerturn\";\n    const USER_TURN_EVENT_NAME = \"userturn\";\n    // Game events' state\n    let events;\n\n    function init() {\n      events = {};\n    }\n\n    function add(eventName, callbackfn) {\n      if (typeof eventName === \"string\" && typeof callbackfn === \"function\") {\n        events[eventName] = events[eventName] ?? [];\n        events[eventName].push(callbackfn);\n      }\n    }\n\n    function remove(eventName, callbackfn) {\n      if (typeof eventName === \"string\") {\n        const callbacks = events[eventName];\n        if (Array.isArray(callbacks)) {\n          const i = callbacks.indexOf(callbackfn);\n          if (i > -1) {\n            callbacks.splice(i, 1);\n            if (callbacks.length < 1) delete events[eventName];\n          }\n        }\n      }\n    }\n\n    function emit(eventName, ...args) {\n      if (typeof eventName === \"string\") {\n        const callbacks = events[eventName];\n        if (Array.isArray(callbacks)) {\n          callbacks.forEach((callbackfn) => callbackfn(...args));\n        }\n      }\n    }\n\n    return {\n      init,\n      add,\n      remove,\n      emit,\n      START_EVENT_NAME,\n      STARTED_EVENT_NAME,\n      HARD_GAME_EVENT_NAME,\n      MEDIUM_GAME_EVENT_NAME,\n      EASY_GAME_EVENT_NAME,\n      ONE_PLAYER_GAME_EVENT_NAME,\n      WIN_EVENT_NAME,\n      MARK_EVENT_NAME,\n      MARKING_EVENT_NAME,\n      MARKED_EVENT_NAME,\n      TIE_EVENT_NAME,\n      RESET_EVENT_NAME,\n      RESET_BOARD_EVENT_NAME,\n      RESTART_EVENT_NAME,\n      COMPUTER_TURN_EVENT_NAME,\n      USER_TURN_EVENT_NAME,\n    };\n  })();\n\n  const gameBoard = (function () {\n    const board = Array(9);\n    const usedCells = [];\n    let computerCallbackTimeout, justStarted, hard, medium, easy;\n\n    function resetState() {\n      board.fill(\"\", 0);\n      usedCells.splice(0);\n      clearTimeout(computerCallbackTimeout);\n      justStarted = false;\n    }\n\n    function isWin(boardArr) {\n      // For every set of board cells (row, column or diagonal),\n      // check whether first cell is not empty\n      // and is equal the other cells in the set.\n      return (\n        // 1st row\n        (boardArr[0] &&\n          boardArr[0] === boardArr[1] &&\n          boardArr[1] === boardArr[2]) ||\n        // 2nd row\n        (boardArr[3] &&\n          boardArr[3] === boardArr[4] &&\n          boardArr[4] === boardArr[5]) ||\n        // 3rd row\n        (boardArr[6] &&\n          boardArr[6] === boardArr[7] &&\n          boardArr[7] === boardArr[8]) ||\n        // 1st column\n        (boardArr[0] &&\n          boardArr[0] === boardArr[3] &&\n          boardArr[3] === boardArr[6]) ||\n        // 2nd column\n        (boardArr[1] &&\n          boardArr[1] === boardArr[4] &&\n          boardArr[4] === boardArr[7]) ||\n        // 3rd column\n        (boardArr[2] &&\n          boardArr[2] === boardArr[5] &&\n          boardArr[5] === boardArr[8]) ||\n        // Diagonal\n        (boardArr[0] &&\n          boardArr[0] === boardArr[4] &&\n          boardArr[4] === boardArr[8]) ||\n        // Diagonal\n        (boardArr[6] &&\n          boardArr[6] === boardArr[4] &&\n          boardArr[4] === boardArr[2])\n      );\n    }\n\n    function isValidPlace(placeIndex) {\n      return !board[placeIndex];\n    }\n\n    function isEmptyPlace() {\n      for (let i = 0; i < board.length; i++) {\n        if (!board[i]) {\n          return true;\n        }\n      }\n    }\n\n    function validateIndex(placeIndex) {\n      const i = Number(placeIndex);\n      if (Number.isInteger(i) && i >= 0 && i < 9) {\n        return i;\n      }\n      return -1;\n    }\n\n    function checkForWin(type) {\n      if (isWin(board)) {\n        gameEvents.emit(gameEvents.WIN_EVENT_NAME, type);\n      } else if (!isEmptyPlace()) {\n        gameEvents.emit(gameEvents.TIE_EVENT_NAME);\n      }\n    }\n\n    function mark(placeIndex, type) {\n      justStarted = false;\n      const i = validateIndex(placeIndex);\n      if (i > -1) {\n        if (isEmptyPlace() && isValidPlace(i)) {\n          board[i] = type;\n          usedCells.push(i);\n          checkForWin(type);\n          gameEvents.emit(gameEvents.MARKED_EVENT_NAME, i, type);\n        }\n      }\n    }\n\n    function selectRandomly() {\n      let i;\n      do {\n        i = Math.floor(Math.random() * 9);\n      } while (usedCells.includes(i));\n      return i;\n    }\n\n    function shuffleArray(arr) {\n      const newArr = [...arr];\n      // Fisher-Yates shuffle algorithm\n      for (let i = newArr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        // Swap current element with random choice from left behind group of elements\n        [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n      }\n      return newArr;\n    }\n\n    function selectSpecial() {\n      // Select cell in the middle/corners\n      if (!usedCells.includes(4)) return 4;\n      const specials = shuffleArray([0, 2, 6, 8]);\n      for (let i = 0; i < specials.length; i++) {\n        if (!usedCells.includes(specials[i])) return specials[i];\n      }\n      return null;\n    }\n\n    function selectWinningCellIndex(boardArr, type) {\n      for (let i = 0; i < 9; i++) {\n        if (!usedCells.includes(i)) {\n          const oldValue = boardArr[i];\n          boardArr[i] = type;\n          if (isWin(boardArr)) return i;\n          boardArr[i] = oldValue;\n        }\n      }\n      return null;\n    }\n\n    function selectCleverly(computerType, userType) {\n      const boardCopy = [...board];\n      // If it is a hard game:\n      return hard\n        ? // Win, prevent user's win, select special cell or select any\n          selectWinningCellIndex(boardCopy, computerType) ??\n            selectWinningCellIndex(boardCopy, userType) ??\n            selectSpecial() ??\n            selectRandomly()\n        : // Win, prevent user's win or select any\n          selectWinningCellIndex(boardCopy, computerType) ??\n            selectWinningCellIndex(boardCopy, userType) ??\n            selectRandomly();\n    }\n\n    function selectEasily(computerType, userType) {\n      const boardCopy = [...board];\n      // Random the possibilities of preventing user's win\n      const varDenominator = Math.floor(Math.random() * 2) + 2;\n      return (\n        // Win\n        selectWinningCellIndex(boardCopy, computerType) ??\n        // Prevent user's win, but not every time\n        (usedCells.length % varDenominator === 0\n          ? selectWinningCellIndex(boardCopy, userType)\n          : null) ??\n        // Select any\n        selectRandomly()\n      );\n    }\n\n    function onComputerTurn(computerType, userType) {\n      let selectedCellIndex;\n      if (hard || medium) {\n        selectedCellIndex = selectCleverly(computerType, userType);\n      } else {\n        selectedCellIndex = selectEasily(computerType, userType);\n      }\n      computerCallbackTimeout = setTimeout(\n        () => {\n          mark(selectedCellIndex, computerType);\n          gameEvents.emit(\n            gameEvents.MARKED_EVENT_NAME,\n            selectedCellIndex,\n            computerType\n          );\n          gameEvents.emit(gameEvents.USER_TURN_EVENT_NAME);\n        },\n        justStarted ? 1500 : 1000 // Respect start animation\n      );\n    }\n\n    function onMarking(cellIndex, type) {\n      mark(cellIndex, type);\n    }\n\n    function onResetBoard() {\n      resetState();\n    }\n\n    function onStart() {\n      justStarted = true;\n    }\n\n    function onHard() {\n      hard = true;\n    }\n\n    function onMedium() {\n      medium = true;\n    }\n\n    function onEasy() {\n      easy = true;\n    }\n\n    function init() {\n      hard = false;\n      medium = false;\n      easy = false;\n      resetState();\n      gameEvents.add(gameEvents.RESET_BOARD_EVENT_NAME, onResetBoard);\n      gameEvents.add(gameEvents.START_EVENT_NAME, onStart);\n      gameEvents.add(gameEvents.HARD_GAME_EVENT_NAME, onHard);\n      gameEvents.add(gameEvents.MEDIUM_GAME_EVENT_NAME, onMedium);\n      gameEvents.add(gameEvents.EASY_GAME_EVENT_NAME, onEasy);\n      gameEvents.add(gameEvents.COMPUTER_TURN_EVENT_NAME, onComputerTurn);\n      gameEvents.add(gameEvents.MARKING_EVENT_NAME, onMarking);\n    }\n\n    return { init };\n  })();\n\n  const display = (function () {\n    const dialog = document.createElement(\"dialog\"),\n      boardCells = [];\n    let gameUI, playersNum, xScore, oScore, ties, currentPlayer, resetBtn;\n\n    function startAnimation(element) {\n      element.setAttribute(\"style\", \"opacity: 0; transform: scale(75%);\");\n    }\n\n    function endAnimation(element) {\n      setTimeout(() => {\n        element.setAttribute(\"style\", \"opacity: 1; transform: scale(100%);\");\n        element.removeAttribute(\"style\");\n      }, 200);\n    }\n\n    function createElement(tagName, className, textContent, attrs) {\n      const element = document.createElement(tagName);\n      if (className) element.className = className;\n      if (textContent) element.textContent = textContent;\n      if (Array.isArray(attrs) && attrs.length > 0) {\n        for (let i = 0; i < attrs.length; i++) {\n          if (Array.isArray(attrs[i]) && attrs[i].length === 2) {\n            element.setAttribute(attrs[i][0], attrs[i][1]);\n          }\n        }\n      }\n      return element;\n    }\n\n    function createGameUI() {\n      // Game control section\n      const settings = createElement(\"div\", \"settings\");\n      playersNum = createElement(\"div\", \"players-num\", \"2 Players\");\n      resetBtn = createElement(\"button\", \"reset circle-btn\", \"↺\", [\n        [\"type\", \"button\"],\n      ]);\n      resetBtn.addEventListener(\"click\", () =>\n        gameEvents.emit(gameEvents.RESET_EVENT_NAME)\n      );\n      settings.append(playersNum, resetBtn);\n      const scores = createElement(\"div\", \"scores\");\n      const xScoreDiv = createElement(\"div\");\n      xScore = createElement(\"span\", \"x-score\", \"0\");\n      xScoreDiv.append(document.createTextNode(\"X: \"), xScore);\n      const tiesDiv = createElement(\"div\");\n      ties = createElement(\"span\", \"ties\", \"0\");\n      tiesDiv.append(document.createTextNode(\"Ties: \"), ties);\n      const oScoreDiv = createElement(\"div\");\n      oScore = createElement(\"span\", \"o-score\", \"0\");\n      oScoreDiv.append(document.createTextNode(\"O: \"), oScore);\n      scores.append(xScoreDiv, tiesDiv, oScoreDiv);\n      const control = createElement(\"div\", \"control\");\n      control.append(settings, scores);\n      // Game board section\n      const playerTurn = createElement(\"div\", \"player-turn\");\n      currentPlayer = createElement(\"span\", \"current-player\", \"X\");\n      playerTurn.append(currentPlayer, document.createTextNode(\" Turn\"));\n      const board = createElement(\"div\", \"board-container\");\n      for (let i = 0; i < 9; i++) {\n        const cell = createElement(\"div\", \"board-cell\");\n        cell.addEventListener(\"click\", () => {\n          gameEvents.emit(gameEvents.MARK_EVENT_NAME, i);\n        });\n        board.appendChild(cell);\n        boardCells.push(cell);\n      }\n      board.append(\n        createElement(\"div\", \"horizontal-divider first-h-div\"),\n        createElement(\"div\", \"horizontal-divider last-h-div\"),\n        createElement(\"div\", \"vertical-divider first-v-div\"),\n        createElement(\"div\", \"vertical-divider last-v-div\")\n      );\n      const game = createElement(\"div\", \"game\");\n      game.append(playerTurn, board);\n      // Game container\n      gameUI = createElement(\"div\", \"container\");\n      gameUI.append(control, game);\n    }\n\n    function showGameUI() {\n      startAnimation(gameUI);\n      document.body.appendChild(gameUI);\n      endAnimation(gameUI);\n    }\n\n    function createChoicesButtons(className, textContentArr, clickHandler) {\n      const buttons = [];\n      // Loop for the length of text content array\n      for (let i = 0; i < textContentArr.length; i++) {\n        buttons[i] = createElement(\"button\", className, textContentArr[i], [\n          [\"type\", \"button\"],\n          [\"value\", textContentArr[i].slice(0, 1).toLowerCase()],\n        ]);\n        buttons[i].addEventListener(\"click\", clickHandler);\n      }\n      return buttons;\n    }\n\n    function createDialog(contentsArr) {\n      if (dialog.children.length > 0) {\n        // Empty the dialog\n        [...dialog.children].forEach((child) => child.remove());\n      }\n      const dialogContentDiv = createElement(\"div\", \"dialog-content\");\n      dialogContentDiv.append(...contentsArr);\n      dialog.appendChild(dialogContentDiv);\n    }\n\n    function showDialog() {\n      document.body.appendChild(dialog);\n      startAnimation(dialog);\n      dialog.showModal();\n      endAnimation(dialog);\n    }\n\n    function terminateDialog() {\n      dialog.close();\n      setTimeout(() => dialog.remove(), 500);\n    }\n\n    function showMessage(message) {\n      const closeButton = createElement(\n        \"button\",\n        \"dialog-close circle-btn\",\n        \"x\",\n        [[\"type\", \"button\"]]\n      );\n      closeButton.addEventListener(\"click\", terminateDialog);\n      const messageDiv = createElement(\"div\", \"message\", message);\n      createDialog([closeButton, messageDiv]);\n      setTimeout(showDialog, 500);\n    }\n\n    function askForDifficultyLevel(playerType) {\n      createDialog(\n        createChoicesButtons(\n          \"difficulty-level\",\n          [\"Easy\", \"Medium\", \"Hard\"],\n          (event) => {\n            const difficultyLevel = event.target.value;\n            terminateDialog();\n            showGameUI();\n            gameEvents.emit(\n              gameEvents.ONE_PLAYER_GAME_EVENT_NAME,\n              playerType,\n              difficultyLevel\n            );\n          }\n        )\n      );\n    }\n\n    function askForPlayerType() {\n      createDialog(\n        createChoicesButtons(\"players-type-choice\", [\"X\", \"O\"], (event) => {\n          askForDifficultyLevel(event.target.value);\n        })\n      );\n    }\n\n    function handleNumOfPlayers(event) {\n      const numOfPlayers = Number(event.target.value);\n      gameEvents.emit(gameEvents.START_EVENT_NAME, numOfPlayers);\n      playersNum.textContent = numOfPlayers === 1 ? \"1 Player\" : \"2 Players\";\n    }\n\n    function resetBoard() {\n      boardCells.forEach((cell) => (cell.textContent = \"\"));\n    }\n\n    function resetState() {\n      playersNum.textContent = \"1 Player\";\n      xScore.textContent = \"0\";\n      oScore.textContent = \"0\";\n      ties.textContent = \"0\";\n      currentPlayer.textContent = \"X\";\n    }\n\n    function invertCurrentPlayerType(type) {\n      if (type.toLowerCase() === \"x\") {\n        currentPlayer.textContent = \"O\";\n      } else {\n        currentPlayer.textContent = \"X\";\n      }\n    }\n\n    function onStart(num) {\n      if (num === 1) {\n        askForPlayerType();\n      } else {\n        terminateDialog();\n        showGameUI();\n      }\n    }\n\n    function onStarted(type) {\n      currentPlayer.textContent = type;\n    }\n\n    function onMarked(cellIndex, type) {\n      boardCells[cellIndex].textContent = type;\n      invertCurrentPlayerType(type);\n    }\n\n    function onWin(type) {\n      showMessage(\"\" + type + \" Win!\");\n      if (type === \"X\") {\n        let currentScore = Number(xScore.textContent);\n        xScore.textContent = currentScore ? ++currentScore : 1;\n      } else {\n        let currentScore = Number(oScore.textContent);\n        oScore.textContent = currentScore ? ++currentScore : 1;\n      }\n    }\n\n    function onTie() {\n      showMessage(\"Tie!\");\n      let currentTies = Number(ties.textContent);\n      ties.textContent = currentTies ? ++currentTies : 1;\n    }\n\n    function onResetBoard(type) {\n      currentPlayer.textContent = type;\n      resetBoard();\n    }\n\n    function onHard() {\n      const gameLevelSpan = createElement(\"span\", \"game-level\", \" (Hard)\");\n      playersNum.appendChild(gameLevelSpan);\n    }\n\n    function onMedium() {\n      const gameLevelSpan = createElement(\"span\", \"game-level\", \" (Medium)\");\n      playersNum.appendChild(gameLevelSpan);\n    }\n\n    function onEasy() {\n      const gameLevelSpan = createElement(\"span\", \"game-level\", \" (Easy)\");\n      playersNum.appendChild(gameLevelSpan);\n    }\n\n    function init() {\n      if (!gameUI) createGameUI();\n      gameEvents.add(gameEvents.START_EVENT_NAME, onStart);\n      gameEvents.add(gameEvents.STARTED_EVENT_NAME, onStarted);\n      gameEvents.add(gameEvents.WIN_EVENT_NAME, onWin);\n      gameEvents.add(gameEvents.TIE_EVENT_NAME, onTie);\n      gameEvents.add(gameEvents.MARKED_EVENT_NAME, onMarked);\n      gameEvents.add(gameEvents.RESET_BOARD_EVENT_NAME, onResetBoard);\n      gameEvents.add(gameEvents.HARD_GAME_EVENT_NAME, onHard);\n      gameEvents.add(gameEvents.MEDIUM_GAME_EVENT_NAME, onMedium);\n      gameEvents.add(gameEvents.EASY_GAME_EVENT_NAME, onEasy);\n      resetState();\n      resetBoard();\n      createDialog(\n        createChoicesButtons(\n          \"players-num-choice\",\n          [\"1 Player\", \"2 Players\"],\n          handleNumOfPlayers\n        )\n      );\n      showDialog();\n    }\n\n    return { init };\n  })();\n\n  const game = (function () {\n    let roundCount,\n      players,\n      currentPlayer,\n      numOfPlayers,\n      userType,\n      computerType,\n      computerTurn,\n      gameStarted,\n      boardRestarted,\n      win,\n      tie,\n      markCount;\n\n    function createPlayer(type) {\n      let score = 0;\n\n      function getType() {\n        return type;\n      }\n\n      function getScore() {\n        return score;\n      }\n\n      function incrementScore() {\n        return ++score;\n      }\n\n      return { getType, getScore, incrementScore };\n    }\n\n    function invertCurrentPlayer() {\n      markCount++;\n      currentPlayer = players[markCount % 2];\n    }\n\n    function resetState() {\n      win = false;\n      tie = false;\n      markCount = roundCount;\n      currentPlayer = players[markCount % 2];\n      boardRestarted = true;\n      computerTurn =\n        numOfPlayers === 1 && computerType === currentPlayer.getType();\n    }\n\n    function setPlayersTypes(type) {\n      if (type.toUpperCase() === players[0].getType()) {\n        [userType, computerType] = [players[0].getType(), players[1].getType()];\n      } else {\n        [computerType, userType] = [players[0].getType(), players[1].getType()];\n      }\n    }\n\n    function announceGameDifficulty(difficultyLevel) {\n      difficultyLevel = difficultyLevel.toLowerCase();\n      if (difficultyLevel === \"h\") {\n        gameEvents.emit(gameEvents.HARD_GAME_EVENT_NAME);\n      } else if (difficultyLevel === \"m\") {\n        gameEvents.emit(gameEvents.MEDIUM_GAME_EVENT_NAME);\n      } else {\n        gameEvents.emit(gameEvents.EASY_GAME_EVENT_NAME);\n      }\n    }\n\n    function setComputerTurn() {\n      computerTurn = computerType === currentPlayer.getType();\n      if (computerTurn) {\n        gameEvents.emit(\n          gameEvents.COMPUTER_TURN_EVENT_NAME,\n          computerType,\n          userType\n        );\n      }\n    }\n\n    function onStart(value) {\n      const num = Number(value);\n      if (!Number.isNaN(num)) {\n        numOfPlayers = num;\n        gameStarted = num === 2;\n        if (gameStarted) {\n          gameEvents.emit(\n            gameEvents.STARTED_EVENT_NAME,\n            currentPlayer.getType()\n          );\n        }\n      }\n    }\n\n    function onOneGamePlayer(type, difficultyLevel) {\n      setPlayersTypes(type);\n      announceGameDifficulty(difficultyLevel);\n      setComputerTurn();\n      gameEvents.emit(gameEvents.STARTED_EVENT_NAME, currentPlayer.getType());\n      gameStarted = true;\n    }\n\n    function onMark(cellIndex) {\n      if (gameStarted && !computerTurn && !win && !tie) {\n        gameEvents.emit(\n          gameEvents.MARKING_EVENT_NAME,\n          cellIndex,\n          currentPlayer.getType()\n        );\n      }\n    }\n\n    function onMarked() {\n      invertCurrentPlayer();\n      if (numOfPlayers === 1 && !computerTurn && !win && !tie) {\n        gameEvents.emit(\n          gameEvents.COMPUTER_TURN_EVENT_NAME,\n          computerType,\n          userType\n        );\n        computerTurn = true;\n      }\n      boardRestarted = false;\n    }\n\n    function onUserTurn() {\n      computerTurn = false;\n      invertCurrentPlayer();\n    }\n\n    function onWin() {\n      roundCount++;\n      win = true;\n      tie = false;\n    }\n\n    function onTie() {\n      roundCount++;\n      tie = true;\n      win = false;\n    }\n\n    function onReset() {\n      if (!boardRestarted) {\n        resetState();\n        gameEvents.emit(\n          gameEvents.RESET_BOARD_EVENT_NAME,\n          currentPlayer.getType()\n        );\n        if (computerTurn) {\n          gameEvents.emit(\n            gameEvents.COMPUTER_TURN_EVENT_NAME,\n            computerType,\n            userType\n          );\n        }\n      } else {\n        gameEvents.emit(gameEvents.RESTART_EVENT_NAME, currentPlayer.getType());\n      }\n    }\n\n    function init() {\n      roundCount = 0;\n      players = [createPlayer(\"X\"), createPlayer(\"O\")];\n      currentPlayer = players[0];\n      numOfPlayers = 0;\n      userType = null;\n      computerType = null;\n      gameStarted = false;\n      resetState();\n      gameEvents.add(gameEvents.START_EVENT_NAME, onStart);\n      gameEvents.add(gameEvents.ONE_PLAYER_GAME_EVENT_NAME, onOneGamePlayer);\n      gameEvents.add(gameEvents.MARK_EVENT_NAME, onMark);\n      gameEvents.add(gameEvents.MARKED_EVENT_NAME, onMarked);\n      gameEvents.add(gameEvents.WIN_EVENT_NAME, onWin);\n      gameEvents.add(gameEvents.TIE_EVENT_NAME, onTie);\n      gameEvents.add(gameEvents.RESET_EVENT_NAME, onReset);\n      gameEvents.add(gameEvents.USER_TURN_EVENT_NAME, onUserTurn);\n    }\n\n    return { init };\n  })();\n\n  // Play a game\n  (function startNewGame() {\n    gameEvents.init();\n    gameEvents.add(gameEvents.RESTART_EVENT_NAME, startNewGame);\n    gameBoard.init(), game.init(), display.init();\n  })();\n})();\n"],"names":["gameEvents","events","init","add","eventName","callbackfn","push","remove","callbacks","Array","isArray","i","indexOf","splice","length","emit","args","forEach","START_EVENT_NAME","STARTED_EVENT_NAME","HARD_GAME_EVENT_NAME","MEDIUM_GAME_EVENT_NAME","EASY_GAME_EVENT_NAME","ONE_PLAYER_GAME_EVENT_NAME","WIN_EVENT_NAME","MARK_EVENT_NAME","MARKING_EVENT_NAME","MARKED_EVENT_NAME","TIE_EVENT_NAME","RESET_EVENT_NAME","RESET_BOARD_EVENT_NAME","RESTART_EVENT_NAME","COMPUTER_TURN_EVENT_NAME","USER_TURN_EVENT_NAME","gameBoard","board","usedCells","computerCallbackTimeout","justStarted","hard","medium","easy","resetState","fill","clearTimeout","isWin","boardArr","isEmptyPlace","mark","placeIndex","type","Number","isInteger","validateIndex","isValidPlace","checkForWin","selectRandomly","Math","floor","random","includes","selectWinningCellIndex","oldValue","onComputerTurn","computerType","userType","selectedCellIndex","boardCopy","specials","arr","newArr","j","shuffleArray","selectSpecial","selectCleverly","varDenominator","selectEasily","setTimeout","onMarking","cellIndex","onResetBoard","onStart","onHard","onMedium","onEasy","display","dialog","document","createElement","boardCells","gameUI","playersNum","xScore","oScore","ties","currentPlayer","resetBtn","startAnimation","element","setAttribute","endAnimation","removeAttribute","tagName","className","textContent","attrs","showGameUI","body","appendChild","createChoicesButtons","textContentArr","clickHandler","buttons","slice","toLowerCase","addEventListener","createDialog","contentsArr","children","child","dialogContentDiv","append","showDialog","showModal","terminateDialog","close","showMessage","message","closeButton","handleNumOfPlayers","event","numOfPlayers","target","value","resetBoard","cell","num","playerType","difficultyLevel","onStarted","onMarked","invertCurrentPlayerType","onWin","currentScore","onTie","currentTies","gameLevelSpan","settings","scores","xScoreDiv","createTextNode","tiesDiv","oScoreDiv","control","playerTurn","game","createGameUI","roundCount","players","computerTurn","gameStarted","boardRestarted","win","tie","markCount","createPlayer","score","getType","getScore","incrementScore","invertCurrentPlayer","isNaN","onOneGamePlayer","toUpperCase","setPlayersTypes","announceGameDifficulty","onMark","onUserTurn","onReset","startNewGame"],"sourceRoot":""}