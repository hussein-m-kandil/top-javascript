{"version":3,"file":"odin-recursion.4bf86321d2bf2afa9045.bundle.js","mappings":"y5CAwBA,IAAMA,EAAYC,SAASC,cAAc,sBACnCC,EAAUF,SAASC,cAAc,mBAyBvC,SAASE,EAAUC,GACjB,GAAIA,EAAOC,OAAS,EAAG,OAAOD,EAK9B,IAJA,IAAME,EAAYC,KAAKC,MAAMJ,EAAOC,OAAS,GACvCI,EAAkBN,EAAUC,EAAOM,MAAM,EAAGJ,IAC5CK,EAAmBR,EAAUC,EAAOM,MAAMJ,IAC1CM,EAAS,GACRH,EAAgBJ,OAAS,GAAKM,EAAiBN,OAAS,GAC7DO,EAAOC,KACLJ,EAAgB,GAAKE,EAAiB,GAClCF,EAAgBK,QAChBH,EAAiBG,SAQzB,OALIL,EAAgBJ,OAAS,EAC3BO,EAAOC,KAAIE,MAAXH,EAAMI,EAASP,IAEfG,EAAOC,KAAIE,MAAXH,EAAMI,EAASL,IAEVC,CACT,CA3CAV,EAAQ,WAAWe,UAAW,EAC9Bf,EAAQgB,iBAAiB,SAAS,WAChCnB,EAAUoB,YAAc,GACxBjB,EAAQ,WAAWe,UAAYf,EAAQkB,eACzC,IACAlB,EAAQgB,iBAAiB,UAAU,SAACG,GAClCA,EAAMC,iBACN,IA7BMC,EA6BAC,EAASH,EAAMI,OAAO,cAAcC,MACKC,EAAAC,EA7BxC,CADDL,EAAIM,OA8B8BL,EA9BnBM,QACVD,OAAOE,UAAUR,IAAMA,GAAK,GAAKA,GAAK,KA6BF,GAAxCS,EAAGL,EAAA,GAASA,EAAA,KAEjB5B,EAAUoB,YA5Bd,SAAmBa,GASjB,IARA,IAAMC,EAAS,GACTC,EAAO,CAAC,EACRC,EAAM,SAANA,EAAOC,GAIX,OAHKP,OAAOE,UAAUG,EAAKE,MACzBF,EAAKE,GAAKA,EAAI,EAAIA,EAAID,EAAIC,EAAI,GAAKD,EAAIC,EAAI,IAEtCF,EAAKE,EACd,EACSb,EAAI,EAAGA,EAAIS,EAAKT,IACvBU,EAAOV,GAAKY,EAAIZ,GAElB,OAAOU,CACT,CAe4BI,CAAUL,GAAKM,KAAK,KAEhD,IAkCA,IAAMC,EAAavC,SAASC,cAAc,uBACpCuC,EAAWxC,SAASC,cAAc,oBACxCuC,EAAS,YAAYvB,UAAW,EAChCuB,EAAStB,iBAAiB,SAAS,WACjCqB,EAAWpB,YAAc,GACzBqB,EAAS,YAAYvB,UAAYuB,EAASpB,eAC5C,IACAoB,EAAStB,iBAAiB,UAAU,SAACG,GACnCA,EAAMC,iBACN,IACAmB,EAzCF,SAAyBC,GACvB,IAAMtC,EAASsC,EACZZ,OACAa,MAAM,KACNC,QAAO,SAACZ,GAAG,MAAa,KAARA,CAAU,IAC1Ba,KAAI,SAACb,GAAG,OAAKH,OAAOG,EAAI,IAC3B,MAAO,CAAC5B,EAAQA,EAAO0C,OAAM,SAACd,GAAG,OAAKH,OAAOE,UAAUC,EAAI,IAC7D,CAkC4Be,CADV1B,EAAMI,OAAO,eAAeC,OACMsB,EAAApB,EAAAa,EAAA,GAA3CrC,EAAM4C,EAAA,GAASA,EAAA,KAEpBT,EAAWpB,YAAchB,EAAUC,GAAQkC,KAAK,KAEpD,G","sources":["webpack://top-javascript-study/./odin-recursion/index.js"],"sourcesContent":["import './index.css';\n\n// Fibonacci logic\nfunction validateFibInput(inp) {\n  const i = Number(inp.trim());\n  return [i, Number.isInteger(i) && i >= 0 && i <= 1000];\n}\n\nfunction fibonacci(num) {\n  const result = [];\n  const memo = {};\n  const fib = (n) => {\n    if (!Number.isInteger(memo[n])) {\n      memo[n] = n < 2 ? n : fib(n - 1) + fib(n - 2);\n    }\n    return memo[n];\n  };\n  for (let i = 0; i < num; i++) {\n    result[i] = fib(i);\n  }\n  return result;\n}\n\n// Fibonacci UI\nconst fibResult = document.querySelector('#fibonacci .result');\nconst fibForm = document.querySelector('#fibonacci form');\nfibForm['fib-btn'].disabled = true;\nfibForm.addEventListener('input', () => {\n  fibResult.textContent = '';\n  fibForm['fib-btn'].disabled = !fibForm.checkValidity();\n});\nfibForm.addEventListener('submit', (event) => {\n  event.preventDefault();\n  const fibNum = event.target['fib-number'].value;\n  const [num, isValid] = validateFibInput(fibNum);\n  if (isValid) {\n    fibResult.textContent = fibonacci(num).join(',');\n  }\n});\n\n// Merge Sort logic\nfunction validateNumList(numbers) {\n  const numArr = numbers\n    .trim()\n    .split(' ')\n    .filter((num) => num !== '')\n    .map((num) => Number(num));\n  return [numArr, numArr.every((num) => Number.isInteger(num))];\n}\n\nfunction mergeSort(numArr) {\n  if (numArr.length < 2) return numArr;\n  const arrCenter = Math.floor(numArr.length / 2);\n  const firstSortedHalf = mergeSort(numArr.slice(0, arrCenter));\n  const secondSortedHalf = mergeSort(numArr.slice(arrCenter));\n  const newArr = [];\n  while (firstSortedHalf.length > 0 && secondSortedHalf.length > 0) {\n    newArr.push(\n      firstSortedHalf[0] < secondSortedHalf[0]\n        ? firstSortedHalf.shift()\n        : secondSortedHalf.shift(),\n    );\n  }\n  if (firstSortedHalf.length > 0) {\n    newArr.push(...firstSortedHalf);\n  } else {\n    newArr.push(...secondSortedHalf);\n  }\n  return newArr;\n}\n\n// Merge Sort UI\nconst sortResult = document.querySelector('#merge-sort .result');\nconst sortForm = document.querySelector('#merge-sort form');\nsortForm['sort-btn'].disabled = true;\nsortForm.addEventListener('input', () => {\n  sortResult.textContent = '';\n  sortForm['sort-btn'].disabled = !sortForm.checkValidity();\n});\nsortForm.addEventListener('submit', (event) => {\n  event.preventDefault();\n  const numList = event.target['number-list'].value;\n  const [numArr, isValid] = validateNumList(numList);\n  if (isValid) {\n    sortResult.textContent = mergeSort(numArr).join(' ');\n  }\n});\n"],"names":["fibResult","document","querySelector","fibForm","mergeSort","numArr","length","arrCenter","Math","floor","firstSortedHalf","slice","secondSortedHalf","newArr","push","shift","apply","_toConsumableArray","disabled","addEventListener","textContent","checkValidity","event","preventDefault","i","fibNum","target","value","_validateFibInput2","_slicedToArray","Number","trim","isInteger","num","result","memo","fib","n","fibonacci","join","sortResult","sortForm","_validateNumList","numbers","split","filter","map","every","validateNumList","_validateNumList2"],"sourceRoot":""}