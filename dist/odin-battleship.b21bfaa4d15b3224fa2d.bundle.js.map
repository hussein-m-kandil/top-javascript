{"version":3,"file":"odin-battleship.b21bfaa4d15b3224fa2d.bundle.js","mappings":"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","sources":["webpack://top-javascript-study/./odin-battleship/game-events/game-events.js","webpack://top-javascript-study/./odin-battleship/helpers/createElement.js","webpack://top-javascript-study/./odin-battleship/ship/ship.js","webpack://top-javascript-study/./odin-battleship/game-board/game-board.js","webpack://top-javascript-study/./odin-battleship/helpers/createGameBoardMatrix.js","webpack://top-javascript-study/./odin-battleship/player/player.js","webpack://top-javascript-study/./odin-battleship/index.js","webpack://top-javascript-study/./odin-battleship/components/player-info/index.js","webpack://top-javascript-study/./odin-battleship/helpers/capitalize.js","webpack://top-javascript-study/./odin-battleship/components/board/index.js"],"sourcesContent":["const REGISTRY = {};\n\n/**\n * Adds the given callback/s to registered callbacks on the given event (eventName).\n * @param {string} eventName\n * @param  {...function} callbacks\n */\nfunction add(eventName, ...callbacks) {\n  if (\n    typeof eventName !== 'string' ||\n    !callbacks.every((c) => typeof c === 'function')\n  ) {\n    const strArgs = `${eventName}${callbacks.length > 0 ? ', ' + callbacks.toString().replace(/(?:\\[|\\])/, '') : ''}`;\n    throw TypeError(\n      `Expect event name of type 'string' and at least 1 callback! Given: '${strArgs}'`,\n    );\n  }\n\n  if (REGISTRY[eventName]) {\n    REGISTRY[eventName].push(...callbacks);\n  } else {\n    REGISTRY[eventName] = callbacks;\n  }\n}\nObject.freeze(add);\nObject.freeze(add.prototype);\n\n/**\n * Removes the given callback from the registered callbacks on the given event (eventName).\n *\n * NOTE: The given callback MUST be the same reference that you had gavin to 'add' in order to be removed.\n * @param {string} eventName\n * @param {function} callback\n */\nfunction remove(eventName, callback) {\n  if (typeof eventName !== 'string' || typeof callback !== 'function') {\n    throw TypeError(\n      `Expect (eventName: string) & (callback: function)! Given: '${eventName}, ${callback}'`,\n    );\n  }\n\n  if (REGISTRY[eventName]) {\n    REGISTRY[eventName] = REGISTRY[eventName].filter(\n      (registeredCallback) => registeredCallback !== callback,\n    );\n  }\n}\nObject.freeze(remove);\nObject.freeze(remove.prototype);\n\n/**\n * Emits the given event (eventName); All registered callbacks on that event gets called.\n * @param {string} eventName\n * @param  {...any} args\n */\nfunction emit(eventName, ...args) {\n  if (typeof eventName !== 'string') {\n    throw TypeError(\n      `Expect at least 1 argument of type 'string'! Given: '${eventName}'`,\n    );\n  }\n\n  if (REGISTRY[eventName]) {\n    REGISTRY[eventName].forEach((callback) => {\n      callback(...args);\n    });\n  }\n}\nObject.freeze(emit);\nObject.freeze(emit.prototype);\n\nconst gameEvents = {\n  HIT: 'Boom',\n  MISS: 'Oops',\n  LOSS: 'Meh',\n  add,\n  remove,\n  emit,\n};\nObject.freeze(gameEvents);\n\nexport default gameEvents;\nexport { gameEvents };\n","/**\n * Creates HTMLElement of the given 'tagName' with any of the given\n * className, id or attributes\n * @param {string} tagName\n * @param {string?} className\n * @param {string?} textContent\n * @param {Array<string, string>?} attrs\n * - Any number of attributes (each of which as a key-value pair)\n * @returns {HTMLElement}\n */\nexport default function createElement(\n  tagName,\n  className,\n  textContent,\n  ...attrs\n) {\n  if (typeof tagName !== 'string') {\n    throw TypeError(\"Missing 'tagName' of type 'string'!\");\n  }\n  const element = document.createElement(tagName);\n  if (className) element.className = className;\n  if (textContent) element.textContent = textContent;\n  // Flatten attrs 1 level depth (in case attrs is in the form of an Array of paris)\n  if (\n    attrs.length === 1 &&\n    Array.isArray(attrs[0]) &&\n    Array.isArray(attrs[0][0])\n  ) {\n    attrs = attrs.flat(1);\n  }\n  if (attrs.length > 0) {\n    for (let i = 0; i < attrs.length; i++) {\n      if (\n        Array.isArray(attrs[i]) &&\n        attrs[i].length === 2 &&\n        attrs[i][0] &&\n        typeof attrs[i][0] === 'string'\n      ) {\n        if (attrs[i][1] || attrs[i][1] === 0 || attrs[i][1] === '') {\n          element.setAttribute(attrs[i][0], attrs[i][1]);\n        }\n      } else {\n        throw TypeError(\n          \"A given attribute in '...attrs' must be in the form of [string, string]\",\n        );\n      }\n    }\n  }\n  return element;\n}\n\nexport { createElement };\n","export default function Ship(length) {\n  if (!Number.isInteger(length) || length < 2 || length > 5) {\n    throw TypeError(\n      `Expect 1 argument (length) of type 'number'; 1 < length < 6! given '${length}'`,\n    );\n  }\n\n  // Ship's state & logic\n  let hits = 0,\n    sunk = false;\n  const hit = () => {\n    if (!sunk) {\n      hits++;\n      sunk = hits >= length;\n    }\n  };\n  const isSunk = () => sunk;\n\n  // Create Ship object with its members to be recorded (just for autocompletion) before making them non-writable\n  const ship = {\n    length,\n    hits,\n    hit,\n    isSunk,\n  };\n\n  // Set the prototype of ship object to Ship.prototype\n  Object.setPrototypeOf(ship, Ship.prototype);\n\n  // Reconfigure all Ship's members and make them non-writable\n  const config = { configurable: false, enumerable: true };\n  const configExt = { ...config, writable: false };\n  Object.defineProperties(ship, {\n    // Set the constructor of a ship object to Ship\n    constructor: {\n      ...configExt,\n      enumerable: false,\n      value: Ship,\n    },\n    length: {\n      ...config,\n      get() {\n        return length;\n      },\n    },\n    hits: {\n      ...config,\n      get() {\n        return hits;\n      },\n    },\n    hit: {\n      ...configExt,\n      value: hit,\n    },\n    isSunk: {\n      ...configExt,\n      value: isSunk,\n    },\n  });\n\n  return ship;\n}\n\nexport { Ship };\n","import { createGameBoardMatrix } from '../helpers/createGameBoardMatrix.js';\nimport { gameEvents } from '../game-events';\nimport { Ship } from '../ship';\n\nexport default function GameBoard() {\n  const board = createGameBoardMatrix();\n\n  // Fill the board\n  board.forEach((row) =>\n    row.forEach((cell) => {\n      cell.ship = null;\n      cell.attacked = false;\n      cell.missed = false;\n    }),\n  );\n\n  // Define private helper that takes 'n' to generate random number 'r': 0 < r < n\n  const getRandomUpToButNotIncluding = (n) => Math.floor(Math.random() * n);\n\n  // Define private helper to check whether a cell on board is empty\n  const isEmptyCell = ([i, j]) => board[i][j].ship === null;\n\n  // Insert the ships in random places\n  const ships = [Ship(2), Ship(3), Ship(3), Ship(4), Ship(5)];\n\n  ships.forEach((ship) => {\n    // Choose a random direction\n    const varAxis = getRandomUpToButNotIncluding(2);\n    const shipArea = []; // Placeholder for cell's coordinates of the ship\n    while (shipArea.length === 0) {\n      // Choose random coordinates for the first cell\n      const coordinates = [\n        getRandomUpToButNotIncluding(board[0].length - ship.length),\n        getRandomUpToButNotIncluding(board.length - ship.length),\n      ];\n      for (let i = 0; i < ship.length; i++) {\n        // If the current coordinates' cell is not empty, reset 'shipArea' so the while loop repeats from the start\n        if (!isEmptyCell(coordinates)) {\n          shipArea.splice(0);\n          break;\n        }\n        // Otherwise, mutate (increment just the axis of our direction) the same reference ('coordinates'),\n        // after passing a copy of its current values to 'shipArea'\n        shipArea.push([...coordinates]);\n        coordinates[varAxis]++;\n        // If you pass 'coordinates' directly to 'shipArea',\n        // you will end with 'shipArea' contains pointers points to the same value on memory (which you have mutate it)\n      }\n    }\n    shipArea.forEach(([i, j]) => {\n      board[i][j].ship = ship;\n    });\n  });\n\n  // Define receiveAttack function\n  const receiveAttack = ([i, j]) => {\n    const lastI = board.length - 1;\n    const lastJ = board[0].length - 1;\n    if (i < 0 || j < 0 || i > lastI || j > lastJ) {\n      throw TypeError(\n        `Invalid coordinates! It should be in the range from '[0, 0]' to '[${lastI}, ${lastJ}]', the given is '[${j}, ${j}]'.`,\n      );\n    }\n    const cell = board[i][j];\n    if (cell.ship && !cell.attacked) {\n      cell.ship.hit();\n      cell.attacked = true;\n      gameEvents.emit(gameEvents.HIT, [i, j]);\n    } else if (!cell.ship && !cell.missed) {\n      cell.missed = true;\n      gameEvents.emit(gameEvents.MISS, [i, j]);\n    }\n    if (ships.every((ship) => ship.isSunk())) {\n      gameEvents.emit(gameEvents.LOSS);\n    }\n  };\n\n  // Create gameBoard object\n  const gameBoard = {\n    ships,\n    board,\n    receiveAttack,\n  };\n\n  // Make a gameBoard object an instance of GameBoard\n  Object.setPrototypeOf(gameBoard, GameBoard.prototype);\n  Object.defineProperty(gameBoard, 'constructor', {\n    value: GameBoard,\n    writable: false,\n    configurable: false,\n    enumerable: false,\n  });\n\n  // Make a gameBoard object immutable\n  Object.freeze(gameBoard);\n\n  return gameBoard;\n}\n\nexport { GameBoard };\n","/**\n * Creates a 2D Array of empty objects\n * @returns {Object[][]}\n */\nexport default function createGameBoardMatrix() {\n  const boardMatrix = [];\n\n  for (let i = 0; i < 10; i++) {\n    boardMatrix[i] = [];\n    for (let j = 0; j < 10; j++) {\n      boardMatrix[i][j] = {};\n    }\n  }\n\n  return boardMatrix;\n}\n\nexport { createGameBoardMatrix };\n","import { GameBoard } from '../game-board';\n\n/**\n * A factory creates player object. A call without argument creates player of type 'computer'.\n * @param {string?} type - The type of the returned player ['computer' | 'human']\n * @returns {Player}\n */\nexport default function Player(type) {\n  const TYPES = ['computer', 'human'];\n\n  // If not given a 'type', default to 'computer',\n  if (type === undefined) {\n    type = TYPES[0];\n  } else {\n    // Otherwise, check the given after converting it to lowercase string\n    type = String(type.toLowerCase());\n    if (!TYPES.includes(type)) {\n      throw TypeError(\n        `Invalid type! Only '${TYPES[0]}' & '${TYPES[1]}' are the valid types. Given: '${type}'`,\n      );\n    }\n  }\n\n  // Add TYPES as a static property on 'Player'\n  Player.TYPES = TYPES;\n\n  const player = { type, gameBoard: GameBoard() };\n\n  // Make the player object an instance of 'Player'\n  Object.setPrototypeOf(player, Player.prototype);\n  // Set 'Player' as the constructor for the player object\n  Object.defineProperty(player, 'constructor', {\n    value: Player,\n    writable: false,\n    enumerable: false,\n    configurable: false,\n  });\n  Object.freeze(player);\n\n  return player;\n}\n\nexport { Player };\n","import './index.css';\n\nimport { gameEvents } from './game-events';\nimport { createElement } from './helpers/createElement';\nimport { PlayerInfo } from './components/player-info';\nimport { Board } from './components/board';\nimport { Player } from './player';\n\n// Create game object to hold the state of the game\nconst game = {\n  playersData: [\n    {\n      name: 'first-player',\n      player: Player('human'),\n      playerUI: createElement('div', 'first-player'),\n    },\n    {\n      name: 'second-player',\n      player: Player('computer'),\n      playerUI: createElement('div', 'second-player'),\n    },\n  ],\n  allPlayersDisabled: false,\n  currentPlayerIndex: 0,\n  /**\n   * Switches the current player's index\n   */\n  switchCurrentPlayer() {\n    this.currentPlayerIndex = (this.currentPlayerIndex + 1) % 2;\n  },\n  /**\n   * Renders the recent player's UI-information/board to the DOM\n   * @param {number} playerIndex\n   * @param {HTMLDivElement?} parentElement - Optional parent to append player's UI to it\n   */\n  renderPlayerUI(playerIndex, parentElement) {\n    const playerData = this.playersData[playerIndex];\n    [...playerData.playerUI.children].forEach((child) => child.remove());\n    playerData.playerUI.append(\n      PlayerInfo(playerData.name, playerData.player.type),\n      Board(\n        playerData.player.gameBoard,\n        playerData.player.type === 'computer',\n        this.allPlayersDisabled || playerIndex === this.currentPlayerIndex,\n      ),\n    );\n    if (parentElement) parentElement.append(playerData.playerUI);\n  },\n  /**\n   * Renders the recent ALL player's UIs-information/board to the DOM\n   * @param {HTMLDivElement} parentElement - Optional parent to append ALL player's UIs to it\n   */\n  renderAllPlayersUI(parentElement) {\n    for (let i = 0; i < game.playersData.length; i++) {\n      game.renderPlayerUI(i, parentElement);\n    }\n  },\n};\n\n// Handle game events\ngameEvents.add(gameEvents.HIT, () => {\n  game.renderPlayerUI(game.currentPlayerIndex === 0 ? 1 : 0);\n});\ngameEvents.add(gameEvents.MISS, () => {\n  game.switchCurrentPlayer();\n  game.renderAllPlayersUI();\n});\ngameEvents.add(gameEvents.LOSS, () => {\n  game.allPlayersDisabled = true;\n  game.renderAllPlayersUI();\n  // TODO: Present a game over message & give the option to play again\n});\n\n// Header\nconst head = createElement('h1', 'head', 'Odin BattleShip');\n\n// Game container\nconst gameContainer = createElement('div', 'game-container');\n\n// Initiate player's UI\ngame.renderAllPlayersUI(gameContainer);\n\n// TODO: Add the ability to change who plays first\n\n// Append the components to the DOM\ndocument.body.append(head, gameContainer);\n","import './index.css';\n\nimport { createElement } from '../../helpers/createElement';\nimport { capitalize } from '../../helpers/capitalize';\n\n/**\n * Creates DOM element (div) that has the player's information\n * @param {string} name - The name of the player (hyphened not spaced)\n * @returns {HTMLDivElement}\n */\nexport default function PlayerInfo(name, type) {\n  if (typeof name !== 'string' || typeof type !== 'string') {\n    throw TypeError(\n      `Invalid 'name' type; expected: 'string', given: '${name}'`,\n    );\n  }\n\n  const playerInfo = createElement('div', `${name}-info`);\n\n  const nameIndicator = capitalize(name.replace('-', ' '));\n  const typeIndicator = type === 'computer' ? 'COMPUTER' : 'YOU';\n\n  const playerName = createElement(\n    'h3',\n    'player-name',\n    `${nameIndicator} (${typeIndicator})`,\n  );\n\n  playerInfo.append(playerName);\n\n  return playerInfo;\n}\n\nexport { PlayerInfo };\n","/**\n * Returns same string with the first character capitalized.\n * @param {string} text - Text to capitalize\n * @return {string} - Same string with first character capitalized\n */\nexport default function capitalize(text) {\n  const strText = String(text);\n  const strAfterFirst = strText.length > 1 ? strText.slice(1) : '';\n  return strText.charAt(0).toLocaleUpperCase() + strAfterFirst;\n}\n\nexport { capitalize };\n","import './index.css';\n\nimport { createElement } from '../../helpers/createElement';\nimport { GameBoard } from '../../game-board';\n\n/**\n * Creates a player's board UI component\n * @param {GameBoard} playerGameBoard - An instance of 'GameBoard'\n * @param {boolean} hidden - Hidden player's ships indicator\n * @param {boolean} disabled - Disabled player's board indicator (to ignore click events)\n * @returns {HTMLDivElement}\n */\nexport default function Board(playerGameBoard, hidden, disabled) {\n  [playerGameBoard, hidden, disabled].forEach((arg) => {\n    if (arg === undefined) {\n      throw TypeError(\"'Board' is called with an invalid number of arguments!\");\n    }\n  });\n\n  if (!(playerGameBoard instanceof GameBoard)) {\n    throw TypeError(\n      `'Board' is called with invalid 'playerGameBoard'! Given '${playerGameBoard}'.`,\n    );\n  }\n\n  if (typeof hidden !== 'boolean' || typeof disabled !== 'boolean') {\n    throw TypeError(\n      `'Board' expects 'hidden' & 'disabled' of type 'boolean'! Given '${hidden} & ${disabled}'.`,\n    );\n  }\n\n  const board = createElement(\n    'div',\n    'board-container' + (disabled ? ' disabled' : ''),\n  );\n\n  let boardWidth = 0;\n\n  playerGameBoard.board.forEach((row, i) => {\n    boardWidth = row.length;\n    row.forEach((cell, j) => {\n      let className = 'board-cell';\n      className += cell.ship && !hidden ? ' ship' : '';\n      className += cell.attacked ? ' attacked' : '';\n      className += cell.missed ? ' missed' : '';\n      const boardCell = createElement('div', className);\n      if (!disabled) {\n        boardCell.addEventListener('click', () => {\n          playerGameBoard.receiveAttack([i, j]);\n          console.log('ATTACK!'); // TODO: TO BE DELETED\n        });\n      }\n      board.appendChild(boardCell);\n    });\n  });\n\n  // Grid styles\n  board.style.display = 'grid';\n  board.style.gridTemplateColumns = `repeat(${boardWidth}, 1fr)`;\n  board.style.gridTemplateRows = `repeat(${boardWidth}, auto)`;\n\n  return board;\n}\n\nexport { Board };\n"],"names":["REGISTRY","add","eventName","_len","arguments","length","callbacks","Array","_key","every","c","strArgs","concat","toString","replace","TypeError","_REGISTRY$eventName","push","apply","remove","callback","filter","registeredCallback","emit","_len2","args","_key2","forEach","Object","freeze","prototype","gameEvents","HIT","MISS","LOSS","createElement","tagName","className","textContent","attrs","element","document","isArray","flat","i","setAttribute","Ship","Number","isInteger","hits","sunk","hit","isSunk","ship","setPrototypeOf","config","configurable","enumerable","configExt","_objectSpread","writable","defineProperties","constructor","value","get","GameBoard","board","boardMatrix","j","createGameBoardMatrix","row","cell","attacked","missed","getRandomUpToButNotIncluding","n","Math","floor","random","isEmptyCell","_ref","_ref2","_slicedToArray","ships","varAxis","shipArea","coordinates","splice","_ref3","_ref4","gameBoard","receiveAttack","_ref5","_ref6","lastI","lastJ","defineProperty","Player","type","TYPES","undefined","String","toLowerCase","includes","player","game","playersData","name","playerUI","allPlayersDisabled","currentPlayerIndex","switchCurrentPlayer","this","renderPlayerUI","playerIndex","parentElement","playerData","children","child","append","text","strText","strAfterFirst","playerInfo","nameIndicator","slice","charAt","toLocaleUpperCase","typeIndicator","playerName","PlayerInfo","playerGameBoard","hidden","disabled","arg","boardWidth","boardCell","addEventListener","console","log","appendChild","style","display","gridTemplateColumns","gridTemplateRows","Board","renderAllPlayersUI","head","gameContainer","body"],"sourceRoot":""}