{"version":3,"file":"odin-weather-app.482e417b8054fe121929.bundle.js","mappings":"yBAUe,SAASA,EACtBC,EACAC,EACAC,GAEA,QAAAC,EAAAC,UAAAC,OADGC,EAAK,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAALF,EAAKE,EAAA,GAAAJ,UAAAI,GAER,GAAuB,iBAAZR,EACT,MAAMS,UAAU,uCAElB,MAAMC,EAAUC,SAASZ,cAAcC,GAWvC,GAVIC,IAAWS,EAAQT,UAAYA,GAC/BC,IAAaQ,EAAQR,YAAcA,GAGpB,IAAjBI,EAAMD,QACNE,MAAMK,QAAQN,EAAM,KACpBC,MAAMK,QAAQN,EAAM,GAAG,MAEvBA,EAAQA,EAAMO,KAAK,IAEjBP,EAAMD,OAAS,EACjB,IAAK,IAAIS,EAAI,EAAGA,EAAIR,EAAMD,OAAQS,IAAK,CACrC,IACEP,MAAMK,QAAQN,EAAMQ,KACA,IAApBR,EAAMQ,GAAGT,SACTC,EAAMQ,GAAG,IACc,iBAAhBR,EAAMQ,GAAG,GAMhB,MAAML,UACJ,4EALEH,EAAMQ,GAAG,IAAsB,IAAhBR,EAAMQ,GAAG,IAA4B,KAAhBR,EAAMQ,GAAG,KAC/CJ,EAAQK,aAAaT,EAAMQ,GAAG,GAAIR,EAAMQ,GAAG,GAOjD,CAEF,OAAOJ,CACT,CC7CAC,SAASK,KAAKC,YCKC,SAAsBC,GACnC,MAAMC,EAAOpB,EAAc,OAAQ,oBAC7BqB,EAAQrB,EACZ,QACA,WACA,GACA,CAAC,OAAQ,QACT,CAAC,OAAQ,YACT,CAAC,cAAe,2BAChB,CAAC,eAAgB,MACjB,CAAC,YAAa,KAGVsB,EAAStB,EACb,SACA,WACA,GACA,CAAC,OAAQ,UACT,CAAC,aAAc,gBAEXuB,EAAOvB,EAAc,OAAQ,UAAW,KAAM,CAAC,cAAe,SAepE,OAbAsB,EAAOJ,YAAYK,GACnBH,EAAKI,OAAOH,EAAOC,GAEnBF,EAAKK,iBAAiB,UAAWC,IAC/BA,EAAMC,iBACND,EAAME,OAAOC,UAAUC,IAAI,WAC3B,MAAMC,EAAWL,EAAME,OAAiB,SAAEI,MACtCD,IACFL,EAAME,OAAOC,UAAUI,OAAO,WDlCpBF,KAAaG,QAAQC,IAAK,oBAAmBJ,IAAW,ECmClEZ,CAAeY,GACjB,IAGKX,CACT,CDxCEgB,G","sources":["webpack://top-javascript-study/./odin-weather-app/helpers/createElement.js","webpack://top-javascript-study/./odin-weather-app/index.js","webpack://top-javascript-study/./odin-weather-app/components/LocationForm/index.js"],"sourcesContent":["/**\n * Creates HTMLElement of the given 'tagName' with any of the given\n * className, id or attributes\n * @param {string} tagName\n * @param {string?} className\n * @param {string?} textContent\n * @param {Array<string, string>?} attrs\n * - Any number of attributes (each of which as a key-value pair)\n * @returns {HTMLElement}\n */\nexport default function createElement(\n  tagName,\n  className,\n  textContent,\n  ...attrs\n) {\n  if (typeof tagName !== 'string') {\n    throw TypeError(\"Missing 'tagName' of type 'string'!\");\n  }\n  const element = document.createElement(tagName);\n  if (className) element.className = className;\n  if (textContent) element.textContent = textContent;\n  // Flatten attrs 1 level depth (in case attrs is in the form of an Array of paris)\n  if (\n    attrs.length === 1 &&\n    Array.isArray(attrs[0]) &&\n    Array.isArray(attrs[0][0])\n  ) {\n    attrs = attrs.flat(1);\n  }\n  if (attrs.length > 0) {\n    for (let i = 0; i < attrs.length; i++) {\n      if (\n        Array.isArray(attrs[i]) &&\n        attrs[i].length === 2 &&\n        attrs[i][0] &&\n        typeof attrs[i][0] === 'string'\n      ) {\n        if (attrs[i][1] || attrs[i][1] === 0 || attrs[i][1] === '') {\n          element.setAttribute(attrs[i][0], attrs[i][1]);\n        }\n      } else {\n        throw TypeError(\n          \"A given attribute in '...attrs' must be in the form of [string, string]\",\n        );\n      }\n    }\n  }\n  return element;\n}\n\nexport { createElement };\n","import './index.css';\n\nimport { LocationForm } from './components/LocationForm';\n\ndocument.body.appendChild(\n  LocationForm((location) => console.log(`The location is: ${location}`)),\n);\n","import './index.css';\n\nimport { createElement } from '../../helpers/createElement';\n\n/**\n * A Form to get the location for the user\n * @param {function} submitCallback - A function that accepts 'location': 'string'\n * @returns {HTMLFormElement}\n */\nexport default function LocationForm(submitCallback) {\n  const form = createElement('form', 'weather-location');\n  const input = createElement(\n    'input',\n    'location',\n    '',\n    ['type', 'text'],\n    ['name', 'location'],\n    ['placeholder', 'Location (e.g. \"Cairo\")'],\n    ['autocomplete', 'on'],\n    ['autofocus', ''],\n    // ['required', ''],\n  );\n  const button = createElement(\n    'button',\n    'location',\n    '',\n    ['type', 'submit'],\n    ['aria-label', 'Get weather'],\n  );\n  const span = createElement('span', 'ui-only', '🔍', ['aria-hidden', 'true']);\n\n  button.appendChild(span);\n  form.append(input, button);\n\n  form.addEventListener('submit', (event) => {\n    event.preventDefault();\n    event.target.classList.add('invalid');\n    const location = event.target['location'].value;\n    if (location) {\n      event.target.classList.remove('invalid');\n      submitCallback(location);\n    }\n  });\n\n  return form;\n}\n\nexport { LocationForm };\n"],"names":["createElement","tagName","className","textContent","_len","arguments","length","attrs","Array","_key","TypeError","element","document","isArray","flat","i","setAttribute","body","appendChild","submitCallback","form","input","button","span","append","addEventListener","event","preventDefault","target","classList","add","location","value","remove","console","log","LocationForm"],"sourceRoot":""}