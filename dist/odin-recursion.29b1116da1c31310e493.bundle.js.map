{"version":3,"file":"odin-recursion.29b1116da1c31310e493.bundle.js","mappings":"yBAwBA,MAAMA,EAAYC,SAASC,cAAc,sBACnCC,EAAUF,SAASC,cAAc,mBAyBvC,SAASE,EAAUC,GACjB,GAAIA,EAAOC,OAAS,EAAG,OAAOD,EAC9B,MAAME,EAAYC,KAAKC,MAAMJ,EAAOC,OAAS,GACvCI,EAAkBN,EAAUC,EAAOM,MAAM,EAAGJ,IAC5CK,EAAmBR,EAAUC,EAAOM,MAAMJ,IAC1CM,EAAS,GACf,KAAOH,EAAgBJ,OAAS,GAAKM,EAAiBN,OAAS,GAC7DO,EAAOC,KACLJ,EAAgB,GAAKE,EAAiB,GAClCF,EAAgBK,QAChBH,EAAiBG,SAQzB,OALIL,EAAgBJ,OAAS,EAC3BO,EAAOC,QAAQJ,GAEfG,EAAOC,QAAQF,GAEVC,CACT,CA3CAV,EAAQ,WAAWa,UAAW,EAC9Bb,EAAQc,iBAAiB,SAAS,KAChCjB,EAAUkB,YAAc,GACxBf,EAAQ,WAAWa,UAAYb,EAAQgB,eAAe,IAExDhB,EAAQc,iBAAiB,UAAWG,IAClCA,EAAMC,iBACN,MAAMC,EAASF,EAAMG,OAAO,cAAcC,OACnCC,EAAKC,GA/Bd,SAA0BC,GACxB,MAAMC,EAAIC,OAAOF,EAAIG,QACrB,MAAO,CAACF,EAAGC,OAAOE,UAAUH,IAAMA,GAAK,GAAKA,GAAK,IACnD,CA4ByBI,CAAiBV,GACpCI,IACF1B,EAAUkB,YA5Bd,SAAmBO,GACjB,MAAMQ,EAAS,GACTC,EAAO,CAAC,EACRC,EAAOC,IACNP,OAAOE,UAAUG,EAAKE,MACzBF,EAAKE,GAAKA,EAAI,EAAIA,EAAID,EAAIC,EAAI,GAAKD,EAAIC,EAAI,IAEtCF,EAAKE,IAEd,IAAK,IAAIR,EAAI,EAAGA,EAAIH,EAAKG,IACvBK,EAAOL,GAAKO,EAAIP,GAElB,OAAOK,CACT,CAe4BI,CAAUZ,GAAKa,KAAK,KAC9C,IAmCF,MAAMC,EAAatC,SAASC,cAAc,uBACpCsC,EAAWvC,SAASC,cAAc,oBACxCsC,EAAS,YAAYxB,UAAW,EAChCwB,EAASvB,iBAAiB,SAAS,KACjCsB,EAAWrB,YAAc,GACzBsB,EAAS,YAAYxB,UAAYwB,EAASrB,eAAe,IAE3DqB,EAASvB,iBAAiB,UAAWG,IACnCA,EAAMC,iBACN,MAAMoB,EAAUrB,EAAMG,OAAO,eAAeC,OACrCnB,EAAQqB,GAzCjB,SAAyBgB,GACvB,MAAMrC,EAASqC,EACZZ,OACAa,MAAM,KACNC,QAAQnB,GAAgB,KAARA,IAChBoB,KAAKpB,GAAQI,OAAOJ,KACvB,MAAO,CAACpB,EAAQA,EAAOyC,OAAOrB,GAAQI,OAAOE,UAAUN,KACzD,CAkC4BsB,CAAgBN,GACtCf,IACFa,EAAWrB,YAAcd,EAAUC,GAAQiC,KAAK,KAClD,G","sources":["webpack://top-javascript-study/./odin-recursion/index.js"],"sourcesContent":["import './index.css';\n\n// Fibonacci logic\nfunction validateFibInput(inp) {\n  const i = Number(inp.trim());\n  return [i, Number.isInteger(i) && i >= 0 && i <= 1000];\n}\n\nfunction fibonacci(num) {\n  const result = [];\n  const memo = {};\n  const fib = (n) => {\n    if (!Number.isInteger(memo[n])) {\n      memo[n] = n < 2 ? n : fib(n - 1) + fib(n - 2);\n    }\n    return memo[n];\n  };\n  for (let i = 0; i < num; i++) {\n    result[i] = fib(i);\n  }\n  return result;\n}\n\n// Fibonacci UI\nconst fibResult = document.querySelector('#fibonacci .result');\nconst fibForm = document.querySelector('#fibonacci form');\nfibForm['fib-btn'].disabled = true;\nfibForm.addEventListener('input', () => {\n  fibResult.textContent = '';\n  fibForm['fib-btn'].disabled = !fibForm.checkValidity();\n});\nfibForm.addEventListener('submit', (event) => {\n  event.preventDefault();\n  const fibNum = event.target['fib-number'].value;\n  const [num, isValid] = validateFibInput(fibNum);\n  if (isValid) {\n    fibResult.textContent = fibonacci(num).join(',');\n  }\n});\n\n// Merge Sort logic\nfunction validateNumList(numbers) {\n  const numArr = numbers\n    .trim()\n    .split(' ')\n    .filter((num) => num !== '')\n    .map((num) => Number(num));\n  return [numArr, numArr.every((num) => Number.isInteger(num))];\n}\n\nfunction mergeSort(numArr) {\n  if (numArr.length < 2) return numArr;\n  const arrCenter = Math.floor(numArr.length / 2);\n  const firstSortedHalf = mergeSort(numArr.slice(0, arrCenter));\n  const secondSortedHalf = mergeSort(numArr.slice(arrCenter));\n  const newArr = [];\n  while (firstSortedHalf.length > 0 && secondSortedHalf.length > 0) {\n    newArr.push(\n      firstSortedHalf[0] < secondSortedHalf[0]\n        ? firstSortedHalf.shift()\n        : secondSortedHalf.shift(),\n    );\n  }\n  if (firstSortedHalf.length > 0) {\n    newArr.push(...firstSortedHalf);\n  } else {\n    newArr.push(...secondSortedHalf);\n  }\n  return newArr;\n}\n\n// Merge Sort UI\nconst sortResult = document.querySelector('#merge-sort .result');\nconst sortForm = document.querySelector('#merge-sort form');\nsortForm['sort-btn'].disabled = true;\nsortForm.addEventListener('input', () => {\n  sortResult.textContent = '';\n  sortForm['sort-btn'].disabled = !sortForm.checkValidity();\n});\nsortForm.addEventListener('submit', (event) => {\n  event.preventDefault();\n  const numList = event.target['number-list'].value;\n  const [numArr, isValid] = validateNumList(numList);\n  if (isValid) {\n    sortResult.textContent = mergeSort(numArr).join(' ');\n  }\n});\n"],"names":["fibResult","document","querySelector","fibForm","mergeSort","numArr","length","arrCenter","Math","floor","firstSortedHalf","slice","secondSortedHalf","newArr","push","shift","disabled","addEventListener","textContent","checkValidity","event","preventDefault","fibNum","target","value","num","isValid","inp","i","Number","trim","isInteger","validateFibInput","result","memo","fib","n","fibonacci","join","sortResult","sortForm","numList","numbers","split","filter","map","every","validateNumList"],"sourceRoot":""}