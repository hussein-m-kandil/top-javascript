{"version":3,"file":"odin-knights-travails.36e269bb81876c2985d8.bundle.js","mappings":"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","sources":["webpack://top-javascript-study/./odin-knights-travails/helpers/createElement.js","webpack://top-javascript-study/./odin-knights-travails/knight-moves/knight-moves.js","webpack://top-javascript-study/./odin-knights-travails/index.js"],"sourcesContent":["/**\n * Creates HTMLElement of the given 'tagName' with any of the given\n * className, id or attributes\n * @param {string} tagName\n * @param {string?} className\n * @param {string?} textContent\n * @param {Array<string, string>?} attrs\n * - Any number of attributes (each of which as a key-value pair)\n * @returns {HTMLElement}\n */\nexport default function createElement(\n  tagName,\n  className,\n  textContent,\n  ...attrs\n) {\n  if (typeof tagName !== 'string') {\n    throw TypeError(\"Missing 'tagName' of type 'string'!\");\n  }\n  const element = document.createElement(tagName);\n  if (className) element.className = className;\n  if (textContent) element.textContent = textContent;\n  // Flatten attrs 1 level depth (in case attrs is in the form of an Array of paris)\n  if (\n    attrs.length === 1 &&\n    Array.isArray(attrs[0]) &&\n    Array.isArray(attrs[0][0])\n  ) {\n    attrs = attrs.flat(1);\n  }\n  if (attrs.length > 0) {\n    for (let i = 0; i < attrs.length; i++) {\n      if (\n        Array.isArray(attrs[i]) &&\n        attrs[i].length === 2 &&\n        attrs[i][0] &&\n        typeof attrs[i][0] === 'string'\n      ) {\n        if (attrs[i][1] || attrs[i][1] === 0 || attrs[i][1] === '') {\n          element.setAttribute(attrs[i][0], attrs[i][1]);\n        }\n      } else {\n        throw TypeError(\n          \"A given attribute in '...attrs' must be in the form of [string, string]\",\n        );\n      }\n    }\n  }\n  return element;\n}\n\nexport { createElement };\n","function getKnightPossibleMoves([currentX, currentY]) {\n  const destinations = [];\n  const modifiers = [\n    [1, 2],\n    [2, 1],\n    [-1, 2],\n    [-2, 1],\n    [-1, -2],\n    [-2, -1],\n    [1, -2],\n    [2, -1],\n  ];\n  modifiers.forEach(([xMod, yMod]) => {\n    const possibleX = currentX + xMod;\n    const possibleY = currentY + yMod;\n    if (possibleX >= 0 && possibleX <= 7 && possibleY >= 0 && possibleY <= 7)\n      destinations.push([possibleX, possibleY]);\n  });\n  return destinations;\n}\n\nfunction createChessBoardGraph() {\n  const chessBoard = [];\n  for (let i = 0; i <= 7; i++) {\n    chessBoard[i] = [];\n    for (let j = 0; j <= 7; j++) {\n      chessBoard[i][j] = getKnightPossibleMoves([i, j]);\n    }\n  }\n  return chessBoard;\n}\n\nexport default function knightMoves(from, to) {\n  if (\n    arguments.length !== 2 ||\n    !Array.isArray(from) ||\n    !Array.isArray(to) ||\n    from.length !== 2 ||\n    to.length !== 2 ||\n    !from.every((n) => Number.isInteger(n) && n >= 0 && n <= 7) ||\n    !to.every((n) => Number.isInteger(n) && n >= 0 && n <= 7)\n  ) {\n    throw TypeError(\n      `Expect 2 arguments each of which is a pair of numbers! given (${Array.from(arguments).join(', ')})`,\n    );\n  }\n\n  const chessBoard = createChessBoardGraph();\n\n  let shortestPath = [];\n  let possibleMoves = [from];\n  const q = [[shortestPath, possibleMoves]];\n\n  // While current possible moves does not include out destination\n  while (possibleMoves.every(([x, y]) => !(x === to[0] && y === to[1]))) {\n    const [path, moves] = q.shift();\n    // Enqueue copies of the current path each of which ends on one of the current possible moves\n    moves.forEach(([x, y]) => {\n      q.push([[...path, [x, y]], chessBoard[x][y]]);\n    });\n    shortestPath = q[0][0];\n    possibleMoves = q[0][1];\n  }\n\n  shortestPath.push(to);\n\n  return shortestPath;\n}\n\nexport { knightMoves };\n","import './index.css';\nimport { createElement } from './helpers/createElement';\nimport { knightMoves } from './knight-moves';\n\n// Create page's head (title)\nconst head = createElement('h1', 'head', 'Odin Knights Travails');\n\n// Create instructions paragraph\nconst instructions = createElement(\n  'p',\n  'instructions',\n  'Click on any square and the Knight should move to it through one of the shortest possible routes.',\n);\n\n// Create the knight shape\nconst knight = createElement('div', 'knight');\nknight.append(createElement('div', 'knight-shape'));\n\n// Prepare a placeholder to hold Knight's current place\nconst knightPlace = [0, 0];\n\n// Prepare a placeholder to hold the moves (steps)\nconst moves = [];\n\n// Create the chess board\nconst chessBoard = createElement('div', 'chess-board');\nfor (let i = 0; i < 8; i++) {\n  const row = createElement('div', 'row');\n  for (let j = 0; j < 8; j++) {\n    const square = createElement('div', 'square');\n    row.append(square);\n    // On click\n    square.addEventListener('click', () => {\n      // Remove highlight from all highlighted squares, if any!\n      moves.forEach(([x, y], index) => {\n        if (index !== moves.length - 1) {\n          const move = chessBoard.children.item(x).children.item(y);\n          move.classList.remove('highlight');\n          move.querySelector('.step-count')?.remove();\n        }\n      });\n      // Remove all old moves\n      moves.splice(0);\n      // Get new moves\n      moves.push(...knightMoves(knightPlace, [i, j]));\n      // Highlight all squares we moves on, except the last move\n      moves.forEach(([x, y], index) => {\n        if (index !== moves.length - 1) {\n          const move = chessBoard.children.item(x).children.item(y);\n          move.classList.add('highlight');\n          move.append(createElement('div', 'step-count', String(index)));\n        }\n      });\n      // Set Knight's current place to the last move place\n      [knightPlace[0], knightPlace[1]] = moves.at(-1);\n      // Move the Knight to its new place\n      chessBoard.children\n        .item(knightPlace[0])\n        .children.item(knightPlace[1])\n        .append(knight);\n    });\n  }\n  chessBoard.append(row);\n}\n\n// Place the Knight on the default place\nchessBoard.children\n  .item(knightPlace[0])\n  .children.item(knightPlace[1])\n  .append(knight);\n\n// Append all components to body\ndocument.body.append(head, instructions, chessBoard);\n"],"names":["createElement","tagName","className","textContent","_len","arguments","length","attrs","Array","_key","TypeError","element","document","isArray","flat","i","setAttribute","getKnightPossibleMoves","_ref","_ref2","_slicedToArray","currentX","currentY","destinations","forEach","_ref3","_ref4","xMod","yMod","possibleX","possibleY","push","head","instructions","knight","append","knightPlace","moves","chessBoard","_loop","row","_loop2","j","square","addEventListener","index","x","y","_move$querySelector","move","children","item","classList","remove","querySelector","splice","apply","from","to","every","n","Number","isInteger","concat","join","createChessBoardGraph","shortestPath","possibleMoves","q","_q$shift2","shift","path","_ref7","_ref8","_ref5","_ref6","knightMoves","add","String","_moves$at2","at","body"],"sourceRoot":""}